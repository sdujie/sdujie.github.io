<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Quartus13.1使用介绍</title>
    <url>/2022/04/25/Quartus13-1%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>微信搜索quartus相关内容可进行下载；</p>
<p>官网下载；</p>
<p>具体步骤略</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>网上的破解方式很多，就不在这里列举；</p>
<p>如果不想破解，本文提供一个简单的方式，无限制使用quartus软件；</p>
<p>quartus软件可以免费试用30天，就是利用此bug，无限试用30天—修改电脑时间至安装的30天内：</p>
<p>不会修改的看下图：</p>
<p><img src="https://s2.loli.net/2022/04/25/katEBVr4bUNDemY.png" alt="time.png"></p>
<h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><p>以FPGA的实验为例，Verilog HDL语言</p>
<h6 id="打开工程"><a href="#打开工程" class="headerlink" title="打开工程"></a>打开工程</h6><p>修改完时间后，打开工程选择下面的选项：</p>
<p><img src="https://s2.loli.net/2022/04/25/YZJfDpN1mOdoyTV.png" alt="using.png"></p>
<h6 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h6><p><img src="https://s2.loli.net/2022/04/25/Q8coKGnl9dNxTrM.png" alt="step1.png"></p>
<p>工程路径不要有中文</p>
<p>工程项目名和module名保持一致（test仅是测试用）</p>
<p><img src="https://s2.loli.net/2022/04/25/iNW5dMl78OE6UAQ.png" alt="step2.png"></p>
<h6 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h6><p>这里选择Verilog语言</p>
<p><img src="https://s2.loli.net/2022/04/25/srHP4TWNV1wAeJ3.png" alt="step3.png"></p>
<h6 id="编辑源代码"><a href="#编辑源代码" class="headerlink" title="编辑源代码"></a>编辑源代码</h6><p>保存文件名和module名保持一致，例 m5.v</p>
<p><img src="https://s2.loli.net/2022/04/25/AJXZoPUrw2xVtMz.png" alt="s4.png"></p>
<h6 id="启动仿真"><a href="#启动仿真" class="headerlink" title="启动仿真"></a>启动仿真</h6><p>包含编译操作，如果有误会报错</p>
<p><img src="https://s2.loli.net/2022/04/25/dpo2Fg1ce37XMbk.png" alt="s5.png"></p>
<p>编译成功的界面：</p>
<p><img src="https://s2.loli.net/2022/04/25/qLIYDemKJl6Bfb5.png" alt="s6.png"></p>
<h6 id="仿真"><a href="#仿真" class="headerlink" title="仿真"></a>仿真</h6><p>quartus提供了简单的时序仿真分析，具体步骤见下：</p>
<p>新建文件，选择VWF</p>
<p><img src="https://s2.loli.net/2022/04/25/H5JgYOufZ6abXew.png" alt="s7VWF.png"></p>
<p>新建完成后出现如下界面：</p>
<p><img src="https://s2.loli.net/2022/04/25/wN4EZrb3TjSQ9en.png" alt="s8.png"></p>
<p>双击左侧空白区域，添加引脚：</p>
<p><img src="https://s2.loli.net/2022/04/25/JXhdWGb5O1iQkwp.png" alt="s9.png"></p>
<p>点击Node Finder…</p>
<p><img src="https://s2.loli.net/2022/04/25/Vs7Fd9CNTjy6b84.png" alt="s10.png"></p>
<p>点击List</p>
<p><img src="https://s2.loli.net/2022/04/25/Sgx8uhPd1BEC45s.png" alt="s11.png"></p>
<p>将引脚全部移动到右侧</p>
<p><img src="https://s2.loli.net/2022/04/25/ycdpPxkuDTaStXA.png" alt="s10wave.png"></p>
<p>点击左侧引脚，然后点击上方提供的时序输入，具体就不再介绍</p>
<p><img src="https://s2.loli.net/2022/04/25/qRxp47uePCDVOQb.png" alt="s11start.png"></p>
<p>点击开始仿真，出现如下界面：</p>
<p><img src="https://s2.loli.net/2022/04/25/iVOEKlRqptZGHh5.png" alt="s12.png"></p>
<p>加载结束后，出现仿真结果</p>
<p><img src="https://s2.loli.net/2022/04/25/437PGtoMSNc1fDp.png" alt="s13.png"></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Quartus软件自带的仿真工具使用简单，由于简单单一，往往没有我们需要的输入时序波形，很多情况下并不适合我们的工程仿真使用；</p>
<p>真正可以做到任何条件的仿真，还得使用Modelsim仿真软件。</p>
]]></content>
      <tags>
        <tag>常用软件</tag>
      </tags>
  </entry>
  <entry>
    <title>Modelsim SE 10.7 使用介绍</title>
    <url>/2022/04/25/Modelsim-SE-%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文以仿真软件Modelsim SE 10.7 版本为例，进行介绍modelsim软件的基本使用；</p>
<p>软件下载，老方法           微信搜索modelsim下载即可找到相关说明贴，按照说明下载完成安装即可；</p>
<h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><p>以FPGA实验的仿真为例，进行介绍</p>
<h6 id="首先需要在Quartus软件中生成源代码文件和激励块文件"><a href="#首先需要在Quartus软件中生成源代码文件和激励块文件" class="headerlink" title="首先需要在Quartus软件中生成源代码文件和激励块文件"></a>首先需要在Quartus软件中生成源代码文件和激励块文件</h6><p>书写的格式和内容参照相关课本资料，以m5序列码的仿真威力，生成m5.v文件和test_m5.v激励块文件（testbench）</p>
<h6 id="打开现在好的modelsim软件。点击左上角新建工程文件："><a href="#打开现在好的modelsim软件。点击左上角新建工程文件：" class="headerlink" title="打开现在好的modelsim软件。点击左上角新建工程文件："></a>打开现在好的modelsim软件。点击左上角新建工程文件：</h6><p><img src="https://s2.loli.net/2022/04/25/UCgOZRdGKNlqLIp.png" alt="1.png"></p>
<h6 id="输入工程名（随便）点击OK"><a href="#输入工程名（随便）点击OK" class="headerlink" title="输入工程名（随便）点击OK"></a>输入工程名（随便）点击OK</h6><p><img src="https://s2.loli.net/2022/04/25/wc4bmWsZ63Vn5Sl.png" alt="2.png"></p>
<h6 id="在弹出来的界面选择添加文件"><a href="#在弹出来的界面选择添加文件" class="headerlink" title="在弹出来的界面选择添加文件"></a>在弹出来的界面选择添加文件</h6><p><img src="https://s2.loli.net/2022/04/25/9vazjixILAQCMYJ.png" alt="3.png"></p>
<h6 id="添加文件，添加完成点击OK"><a href="#添加文件，添加完成点击OK" class="headerlink" title="添加文件，添加完成点击OK"></a>添加文件，添加完成点击OK</h6><p><img src="https://s2.loli.net/2022/04/25/uFaQ7AxVcb2hnzZ.png" alt="4.png"></p>
<h6 id="点击上方菜单中的compile→compile-all"><a href="#点击上方菜单中的compile→compile-all" class="headerlink" title="点击上方菜单中的compile→compile all"></a>点击上方菜单中的compile→compile all</h6><h6 id="编译完成后，显示没有错误，如果有误请修改你的源代码；可以首先在quartus中编译确保无误后在导入："><a href="#编译完成后，显示没有错误，如果有误请修改你的源代码；可以首先在quartus中编译确保无误后在导入：" class="headerlink" title="编译完成后，显示没有错误，如果有误请修改你的源代码；可以首先在quartus中编译确保无误后在导入："></a>编译完成后，显示没有错误，如果有误请修改你的源代码；可以首先在quartus中编译确保无误后在导入：</h6><p><img src="https://s2.loli.net/2022/04/25/Q1HhPiMZFSGunqI.png" alt="8.png"></p>
<h6 id="点击左下角库library"><a href="#点击左下角库library" class="headerlink" title="点击左下角库library"></a>点击左下角库library</h6><p><img src="https://s2.loli.net/2022/04/25/M8mVEg7wfCBZDsI.png" alt="9.png"></p>
<h6 id="在界面中选择work左侧的加号，打开工作"><a href="#在界面中选择work左侧的加号，打开工作" class="headerlink" title="在界面中选择work左侧的加号，打开工作"></a>在界面中选择work左侧的加号，打开工作</h6><p><img src="https://s2.loli.net/2022/04/25/wI3UcgKJjvWfRAq.png" alt="10.png"></p>
<h6 id="选择testbench文件，右键选择simulation。如下所示："><a href="#选择testbench文件，右键选择simulation。如下所示：" class="headerlink" title="选择testbench文件，右键选择simulation。如下所示："></a>选择testbench文件，右键选择simulation。如下所示：</h6><p><img src="https://s2.loli.net/2022/04/25/obNe3hKkq5iXwOF.png" alt="11.png"></p>
<h6 id="仿真会出现一个新的界面，等待加载完成后，选择激励文件，右键，按照如下操作："><a href="#仿真会出现一个新的界面，等待加载完成后，选择激励文件，右键，按照如下操作：" class="headerlink" title="仿真会出现一个新的界面，等待加载完成后，选择激励文件，右键，按照如下操作："></a>仿真会出现一个新的界面，等待加载完成后，选择激励文件，右键，按照如下操作：</h6><p><img src="https://s2.loli.net/2022/04/25/UW2rfihNvVX5M46.png" alt="12.png"></p>
<h6 id="此时会出现仿真界面，但是并没有波形，如下图："><a href="#此时会出现仿真界面，但是并没有波形，如下图：" class="headerlink" title="此时会出现仿真界面，但是并没有波形，如下图："></a>此时会出现仿真界面，但是并没有波形，如下图：</h6><p><img src="https://s2.loli.net/2022/04/25/fD4nvdXcs9HQkI3.png" alt="13.png"></p>
<h6 id="回到上一个界面，点击上放菜单中的simulate→run右run-all"><a href="#回到上一个界面，点击上放菜单中的simulate→run右run-all" class="headerlink" title="回到上一个界面，点击上放菜单中的simulate→run右run-all"></a>回到上一个界面，点击上放菜单中的simulate→run右run-all</h6><p><img src="https://s2.loli.net/2022/04/25/VsKdBIXWbUMo2wH.png" alt="14.png"></p>
<h6 id="再回到仿真界面，出现仿真波形，成功"><a href="#再回到仿真界面，出现仿真波形，成功" class="headerlink" title="再回到仿真界面，出现仿真波形，成功"></a>再回到仿真界面，出现仿真波形，成功</h6><p><img src="https://s2.loli.net/2022/04/25/gSD4WYJ63X95mwC.png" alt="15.png"></p>
<h6 id="如果想结束当前仿真，在上一个界面的simulate中点击end-simulation"><a href="#如果想结束当前仿真，在上一个界面的simulate中点击end-simulation" class="headerlink" title="如果想结束当前仿真，在上一个界面的simulate中点击end simulation"></a>如果想结束当前仿真，在上一个界面的simulate中点击end simulation</h6><p><img src="https://s2.loli.net/2022/04/25/l6VFapvdK9Z7Lrk.png" alt="16.png"></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文主要针对FPGA实验的仿真，进行了简单的介绍；其他基本仿真动作的使用请参照官方说明。</p>
]]></content>
      <tags>
        <tag>常用软件</tag>
      </tags>
  </entry>
  <entry>
    <title>山东大学 自动控制原理实验1、2</title>
    <url>/2022/04/25/%E5%B1%B1%E4%B8%9C%E5%A4%A7%E5%AD%A6-%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C1%E3%80%812/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h2><p><em>阅读书：1-5节，学习MATLAB的相关知识及应用</em></p>
<h2 id="实验二-运用MATLAB完成传递函数的表示与求解"><a href="#实验二-运用MATLAB完成传递函数的表示与求解" class="headerlink" title="实验二    运用MATLAB完成传递函数的表示与求解"></a>实验二    <strong>运用MATLAB完成传递函数的表示与求解</strong></h2><p><em>阅读书：2-5节（用printsys或simplify（G）函数显示必要的结果）</em></p>
<h4 id="一-实验内容"><a href="#一-实验内容" class="headerlink" title="一    实验内容"></a>一    实验内容</h4><p>自行设计并画出一个包含串联、并联、局部反馈以及主反馈的自动控制系统结构图，设定每个环节的传递函数（至少要包括除延迟环节之外的5种基本环节），并编程实现结构图总传递函数的表示和求解（要求有引出点移动或比较点移动等效）</p>
<h4 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h4><p>针对实验内容得到的传递函数</p>
<ol>
<li>写出多项式形式或零极点函数</li>
<li>完成多项式形式与零极点形式的相互转换</li>
</ol>
<h4 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h4><h5 id="1-设计结构框图"><a href="#1-设计结构框图" class="headerlink" title="1.设计结构框图"></a>1.设计结构框图</h5><p><img src="https://s2.loli.net/2022/04/25/hAe1G9jVsXNuMnF.png" alt="1frame.png"></p>
<h5 id="2-结构框图可行性分析"><a href="#2-结构框图可行性分析" class="headerlink" title="2.结构框图可行性分析"></a><strong>2.结构框图可行性分析</strong></h5><h6 id="1-基本结构分析"><a href="#1-基本结构分析" class="headerlink" title="(1) 基本结构分析"></a><strong>(1)</strong> <strong>基本结构分析</strong></h6><p>G1,G2,G3构成基本的串联结构，</p>
<p>将上面等效化简后，与G4构成并联基本结构</p>
<p>H1和H2构成主反馈的部分</p>
<p>H1、H2、H3单独都是局部反馈</p>
<p>于是，该结构包含三种基本结构的四种形式，这一点是可行的。</p>
<h6 id="2-比较点和引出点分析"><a href="#2-比较点和引出点分析" class="headerlink" title="(2) 比较点和引出点分析"></a><strong>(2)</strong> <strong>比较点和引出点分析</strong></h6><p>等效结构图时，如果有交叉需要进行引出点或者比较点的移动，在上述结构框图中H2与下方的H3是存在交叉的，因此在结构图等效化简的时候是涉及到比较点（或者引出点）移动的，于是乎，这一点也符合题目的要求。</p>
<p>综合可得，经过简单的分析，该系统基本符合题目的基本要去，每个基本环节的传递函数需要后续的分析确定。</p>
<h5 id="3-设定传递函数"><a href="#3-设定传递函数" class="headerlink" title="3.设定传递函数"></a><strong>3.设定传递函数</strong></h5><p>常见的六种基本环节分别为比例环节、微分环节、惯性环节、积分环节、振荡环节和延迟环节。本实验中要求的是需要包含前五种基本环节。延迟环节的传递函数在课本一二章的示例中并未涉及到相关表达形式，这可能就是不涉及到这项内容的原因之一。下面是五种基本环节的传递函数形式：</p>
<p><img src="https://s2.loli.net/2022/04/25/P6xAcDYjB5RkEeK.png" alt="2.png"></p>
<p>根据上述的五种基本环节的传递函数，初步确定设计的结构框图中各个传递函数的值，如下：</p>
<p><img src="https://s2.loli.net/2022/04/25/2Ix3rBnL4UlW5q1.png" alt="3.png"></p>
<h5 id="4-分析化简结构，设计代码"><a href="#4-分析化简结构，设计代码" class="headerlink" title="4.分析化简结构，设计代码"></a><strong>4.分析化简结构，设计代码</strong></h5><h6 id="分析简化结构："><a href="#分析简化结构：" class="headerlink" title="分析简化结构："></a><strong>分析简化结构：</strong></h6><p>将的H2比较点前移到H1的比较点位置，系统结构框图如下图所示：</p>
<p><img src="https://s2.loli.net/2022/04/25/Tc7LXf1xPut2dJs.png" alt="4.png"></p>
<h6 id="编程思路"><a href="#编程思路" class="headerlink" title="编程思路"></a><strong>编程思路</strong></h6><p>(1) 计算将G1和G2串联</p>
<p>(2) 计算G1’与H3组成的反馈子系统 </p>
<p>(3) 计算G3与G4组成的并联子系统</p>
<p>(4) 计算G1、G2、H3与G3、G4组成的串联系统</p>
<p>(5) 计算1/G1与H1组成的并联系统</p>
<p>(6) 计算1/G1、H1与H2组成的串联系统</p>
<p>(7) 计算主网络子系统与主反馈组成的闭环系统传递函数</p>
<h4 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">G1=<span class="number">2</span>;G2=tf([<span class="number">2</span> <span class="number">0</span>],[<span class="number">1</span>]);G3=tf([<span class="number">4</span> <span class="number">1</span>],[<span class="number">1</span> <span class="number">0</span>]);</span><br><span class="line">G4=tf([<span class="number">4</span> <span class="number">1</span>],[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]);<span class="comment">%前向的各个环节的传递函数</span></span><br><span class="line">H1=tf([<span class="number">1</span>],[<span class="number">1</span> <span class="number">0</span>]);H2=tf([<span class="number">1</span>],[<span class="number">1</span> <span class="number">2</span>]);H3=<span class="number">1</span>;<span class="comment">%反馈环节的传递函数</span></span><br><span class="line">HH=<span class="number">0.5</span>;<span class="comment">%H2比较点前移的等效子系统1/G1</span></span><br><span class="line">sys1=series(G1,G2);<span class="comment">%计算由G1和G2组成的子回路，由于比价简单的结构，加上分号，不会显示结果</span></span><br><span class="line">sys2=feedback(sys1,H3)<span class="comment">%计算G1、G2、H3组成的反馈子回路，去掉分号，在命令窗口可以观察结果准确与否，便于查错</span></span><br><span class="line">sys3=parallel(G3,G4);<span class="comment">%计算G3、G4组成的并联子系统</span></span><br><span class="line">sys4=series(sys2,sys3)<span class="comment">%计算前后子模块串联的子系统sys4</span></span><br><span class="line">SYS4=zpk(sys4)<span class="comment">%直接观察多项式比较麻烦，化成零极点描述形式，便于观察，去掉分号记得</span></span><br><span class="line">sys5=parallel(H1,HH);<span class="comment">%H1和H2比较点前移的并联结果</span></span><br><span class="line">sys6=series(sys5,H2);<span class="comment">%计算上面整个的反馈子系统的反馈部分</span></span><br><span class="line">sys=feedback(sys4,sys6)<span class="comment">%与主反馈回路构成的系统闭环传递函数，显示记得去掉分号</span></span><br><span class="line">Gzpk=zpk(sys)<span class="comment">%化成零极点描述形式，便于观察</span></span><br><span class="line">printsys(sys.num&#123;<span class="number">1</span>&#125;,sys.den&#123;<span class="number">1</span>&#125;)<span class="comment">%括号中的前项获得分子的系数，后项获得分母的系数</span></span><br><span class="line">                               <span class="comment">%也可以采用simplify（sys）输出，但是，这里输出的结果都不是最简结果</span></span><br><span class="line">                               <span class="comment">%当然也可以将上面想要输出的行的分号去掉也是可以直接输出的</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h4><p><strong>1.</strong>  <strong>Matlab仿真实验结果</strong></p>
<p><img src="https://s2.loli.net/2022/04/25/MXHA2sDbxBzvidq.png" alt="5.png"></p>
<p><img src="https://s2.loli.net/2022/04/25/zY6Qu5Rr2FkNTiW.png" alt="6.png"></p>
<p><strong>2.</strong>  <strong>实际计算结果</strong></p>
<p><img src="https://s2.loli.net/2022/04/25/sfya6QZXrH3KGet.png" alt="8.png"></p>
<p><strong>3.</strong>  <strong>对比结果</strong></p>
<p>可以发现MATLAB仿真实验结果和计算结果稍微有些出入，就是MATLAB仿真最后的结果我们可以看到是没有化简的，也就是传递函数分子分母之间的公因式并没有进行约分。约分化简后，结果保持一致。</p>
<h4 id="实验心得"><a href="#实验心得" class="headerlink" title="实验心得"></a>实验心得</h4><p>略</p>
]]></content>
      <categories>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>自动控制原理实验</tag>
      </tags>
  </entry>
  <entry>
    <title>23考研PDF课本</title>
    <url>/2022/04/26/23%E8%80%83%E7%A0%94PDF%E8%AF%BE%E6%9C%AC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="23考研课本高清PDF扫描版"><a href="#23考研课本高清PDF扫描版" class="headerlink" title="23考研课本高清PDF扫描版"></a>23考研课本高清PDF扫描版</h2><p><a href="https://imgtg.com/image/xsVov"><img src="https://i.imgtg.com/2022/04/26/xsVov.md.png" alt="xsVov.md.png"></a></p>
<p>无水印，阿里云盘资源</p>
<p><a href="https://www.aliyundrive.com/s/VkGoLuzWfpv">点此获取</a></p>
<p>提取码：</p>
]]></content>
      <categories>
        <category>考研资料</category>
      </categories>
      <tags>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>山东大学 自动控制原理实验3</title>
    <url>/2022/04/25/%E5%B1%B1%E4%B8%9C%E5%A4%A7%E5%AD%A6-%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="运用MATLAB完成传递函数的表示和求解"><a href="#运用MATLAB完成传递函数的表示和求解" class="headerlink" title="运用MATLAB完成传递函数的表示和求解"></a><strong>运用MATLAB完成传递函数的表示和求解</strong></h2><p><em>符号运算无须事先对独立变量赋值，运算结果以标准的符号形式表达。相关指令为sym()和sysms()。</em></p>
<h3 id="一、-实验内容"><a href="#一、-实验内容" class="headerlink" title="一、  实验内容"></a><strong>一、</strong>  <strong>实验内容</strong></h3><p>运用符号运算，编程完成书习题2-12（b）、2-15（d）、另任选其它题1题系统传递函数的表示和求解。</p>
<h3 id="二、-实验要求"><a href="#二、-实验要求" class="headerlink" title="二、  实验要求"></a><strong>二、</strong>  <strong>实验要求</strong></h3><p>方案设计，分析解题文本，编程实现。</p>
<h3 id="三、-实验步骤"><a href="#三、-实验步骤" class="headerlink" title="三、  实验步骤"></a><strong>三、</strong>  <strong>实验步骤</strong></h3><h4 id="2-12（b），求传递函数C-s-R-s-和C-s-N-s"><a href="#2-12（b），求传递函数C-s-R-s-和C-s-N-s" class="headerlink" title="2-12（b），求传递函数C(s)/R(s)和C(s)/N(s)"></a><strong>2-12（b），求传递函数C(s)/R(s)和C(s)/N(s)</strong></h4><h5 id="1-结构框图"><a href="#1-结构框图" class="headerlink" title="1.  结构框图"></a><strong>1.</strong>  <strong>结构框图</strong></h5><p><img src="https://s2.loli.net/2022/04/25/vZfDWqyn4zHKduN.png" alt="1.png"></p>
<h5 id="2-结构框图分析"><a href="#2-结构框图分析" class="headerlink" title="2.  结构框图分析"></a><strong>2.</strong>  <strong>结构框图分析</strong></h5><h6 id="1-基本结构分析"><a href="#1-基本结构分析" class="headerlink" title="(1) 基本结构分析"></a><strong>(1)</strong> <strong>基本结构分析</strong></h6><p><strong>当只考虑输入R(s)作用时，扰动输入N（s）=0：</strong></p>
<p>根据上面的结构框图可以很明显的发现存在交叉，因此需要对结构框图进行等效化简。</p>
<p>1)  G1（s）的比较点后移，将G2（s）和G3（s）构成的并联系统合并后的框图如下：</p>
<p><img src="https://s2.loli.net/2022/04/25/kNqtmCaVsIfZyJx.png" alt="2.png"></p>
<p>2)  将单位反馈回路的比较点前移，得到如下框图</p>
<p><img src="https://s2.loli.net/2022/04/25/VXlYD7u5vztAgPN.png" alt="3.png"></p>
<p>3)  根据上面的结构框图即可很简单的设计系统函数的代码，</p>
<p>G1和G2+G2并联；</p>
<p>G4和G2+G3构成反馈回路；</p>
<p>前面的并联部分和后面的反馈部分构成串联系统。</p>
<p>4)  根据这个思路，编程实现即可</p>
<p><strong>当只考虑扰动输入N(s)作用时，输入R（s）=0：</strong></p>
<p>1)  将R(s)置0，等效结构图如下图所示：</p>
<p><img src="https://s2.loli.net/2022/04/25/1mSO6XcvoCjl8N3.png" alt="4.png"></p>
<p>2)  该结构图已经足够简化，后面直接进行代码设计即可</p>
<p>3)  G2和G3构成并联负反馈；</p>
<p>G2和G3构成的并联整体与G4构成负反馈</p>
<p>得到结果</p>
<h5 id="3-源代码"><a href="#3-源代码" class="headerlink" title="3.  源代码"></a><strong>3.</strong>  <strong>源代码</strong></h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 当只考虑输入R(s)作用时，扰动输入N（s）=0：</span></span><br><span class="line">G1=sym(<span class="string">&#x27;G1&#x27;</span>);<span class="comment">%符号定义G1</span></span><br><span class="line">G2=sym(<span class="string">&#x27;G2&#x27;</span>);<span class="comment">%</span></span><br><span class="line">G3=sym(<span class="string">&#x27;G3&#x27;</span>);<span class="comment">%</span></span><br><span class="line">G4=sym(<span class="string">&#x27;G4&#x27;</span>);<span class="comment">%</span></span><br><span class="line">sys1=G2+G3;<span class="comment">%计算由G2和G3组成的串联结构</span></span><br><span class="line">sys2=sys1+G1*G2;<span class="comment">%G2+G3与G1G2构成并联结构</span></span><br><span class="line">sys3=G4/(<span class="number">1</span>+G4*sys1);<span class="comment">%G4与G2+G3构成负反馈回路</span></span><br><span class="line">sys=sys2*sys3<span class="comment">%不加分号，在命令窗口打印结果，前后两部分的串联</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%当只考虑扰动输入N(s)作用时，输入R（s）=0：</span></span><br><span class="line">pause<span class="comment">%暂停，空格继续</span></span><br><span class="line">clc; <span class="comment">%清空命令行窗口 </span></span><br><span class="line">SYS1=G2+G3;<span class="comment">%G2和G3构成并联结构</span></span><br><span class="line">SYS=G4/(<span class="number">1</span>+SYS1*G2)<span class="comment">%不加分号，输出结果，G4与G2+G3构成负反馈结构</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>4.<strong>  </strong>实验结果及分析**</p>
<p><strong>当只考虑输入R(s)作用时，扰动输入N（s）=0：</strong></p>
<p><img src="https://s2.loli.net/2022/04/25/m5xa68YWJUfCHjA.png" alt="5.png"></p>
<p><strong>当只考虑扰动输入N(s)作用时，输入R（s）=0：</strong></p>
<p><img src="https://s2.loli.net/2022/04/25/2yHR78zlKmgLkq9.png" alt="6.png"></p>
<p>与实际计算结果保持一致</p>
<h4 id="2-15（d），求传递函数C-s-R-s-和C-s-N-s"><a href="#2-15（d），求传递函数C-s-R-s-和C-s-N-s" class="headerlink" title="2-15（d），求传递函数C(s)/R(s)和C(s)/N(s)"></a><strong>2-15（d），求传递函数C(s)/R(s)和C(s)/N(s)</strong></h4><h5 id="1-信号流图"><a href="#1-信号流图" class="headerlink" title="1.  信号流图"></a><strong>1.</strong>  <strong>信号流图</strong></h5><p><img src="https://s2.loli.net/2022/04/25/GdMZKPhuxlSseaC.png" alt="7.png"></p>
<h5 id="2-结构流图分析"><a href="#2-结构流图分析" class="headerlink" title="2.  结构流图分析"></a><strong>2.</strong>  <strong>结构流图分析</strong></h5><h6 id="1-基本结构分析-1"><a href="#1-基本结构分析-1" class="headerlink" title="(1) 基本结构分析"></a><strong>(1)</strong> <strong>基本结构分析</strong></h6><p><strong>当只考虑R1时，R2为0：</strong></p>
<p>该结构是存在交叉的，需要将下面的反馈回路的引出点后移，由于引出点后的系数为1，因此引出点后移后反馈回路的系数并未改变，引出点后移后的结构流图如下所示：</p>
<p><img src="https://s2.loli.net/2022/04/25/AXjHUIwiqMfFyca.png" alt="8.png"></p>
<p>c和-f构成反馈回路h1；</p>
<p>b和h1构成串联结构g1；</p>
<p>a与g1构成并联结构g2；</p>
<p>e和-g构成反馈回路h2；</p>
<p>d和h2构成串联结构g3；</p>
<p>1和g3构成并联结构g4；</p>
<p>g2和g4构成串联结构g5；</p>
<p>g5和-h构成负反馈结构G；</p>
<p><strong>当只考虑R2时，R1为0：</strong></p>
<p><img src="https://s2.loli.net/2022/04/25/TYwJMBn1vcuxH7m.png" alt="9.png"></p>
<p>该结构图中，将-h的引出点进行了后移，但是由于后面的系数为1，因此引出点后移后反馈线的系数仍未-h；将1的引出点后移，系数变为d；</p>
<p>e和-g构成负反馈回路h1；</p>
<p>h1和1串联后与d并联构成g0；</p>
<p>c和-f构成负反馈回路h2；</p>
<p>b和h2构成串联结构g1；</p>
<p>g1和a构成并联结构g2；</p>
<p>d、g2和-h构成串联结构g3；</p>
<p>g3为负反馈支路，与g0构成负反馈结构g4；</p>
<h4 id=""><a href="#" class="headerlink" title=" "></a> </h4><h5 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc;<span class="comment">%清除命令行窗口</span></span><br><span class="line"><span class="comment">%当只考虑R1时，R2为0：</span></span><br><span class="line">syms a b c d e f g h l;<span class="comment">%定义符号变量</span></span><br><span class="line">h1=c/(<span class="number">1</span>+c*f);<span class="comment">%c和f构成反馈回路h1</span></span><br><span class="line">g1=b*h1;<span class="comment">%b和h1构成串联结构g1</span></span><br><span class="line">g2=a+g1;<span class="comment">%a和g1构成并联结构g2</span></span><br><span class="line">h2=e/(<span class="number">1</span>+e*g);<span class="comment">%e和g构成负反馈回路h2</span></span><br><span class="line">g3=d*h2;<span class="comment">%d和h2构成串联结构g3</span></span><br><span class="line">g4=<span class="number">1</span>+g3;<span class="comment">%1和g3并联为g4</span></span><br><span class="line">g5=g2*g4;<span class="comment">%g2和g4串联结构g5</span></span><br><span class="line">sys=g5/(<span class="number">1</span>+g5*h)<span class="comment">%g5和h构成总的负反馈回路sys</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pause<span class="comment">%</span></span><br><span class="line">clc;<span class="comment">%清除命令行窗口</span></span><br><span class="line"><span class="comment">%当只考虑R2时，R1为0：</span></span><br><span class="line">h1=e/(<span class="number">1</span>+e*g);<span class="comment">%e和g构成负反馈回路h1</span></span><br><span class="line">g0=h1+d;<span class="comment">%h1和d构成并联结构g0</span></span><br><span class="line">h2=c/(<span class="number">1</span>+c*f);<span class="comment">%c和f构成负反馈回路h2</span></span><br><span class="line">g1=b*h2;<span class="comment">%b和h2构成串联结构g1</span></span><br><span class="line">g2=g1+a;<span class="comment">%g1和a构成并联结构g2</span></span><br><span class="line">g3=d*g2*h;<span class="comment">%d和g2和h构成串联结构</span></span><br><span class="line">g4=g0/(<span class="number">1</span>+g0*g3);<span class="comment">%g0和g3构成负反馈回路</span></span><br><span class="line">sys=l*g4 <span class="comment">%不加分号，在命令行窗口输出结果</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="4-实验结果"><a href="#4-实验结果" class="headerlink" title="4.  实验结果**"></a>4.<strong>  </strong>实验结果**</h5><p><img src="https://s2.loli.net/2022/04/25/9wSkAXgyNF2czxo.png" alt="10.png"></p>
<p><img src="https://s2.loli.net/2022/04/25/kbcerN6TFZC1iRp.png" alt="11.png"></p>
<p>这里可以发现，和我们的实际计算结果还是存在着偏差，至少从表达形式上是存在不一致的。</p>
<p>下面是手动的计算结果：</p>
<p><img src="https://s2.loli.net/2022/04/25/A7o12WgFbsjOEBN.png" alt="12.png"></p>
<h4 id="习题2-11（e）求传递函数C-s-R-s"><a href="#习题2-11（e）求传递函数C-s-R-s" class="headerlink" title="习题2-11（e）求传递函数C(s)/R(s)"></a><strong>习题2-11（e）求传递函数C(s)/R(s)</strong></h4><h5 id="1-结构框图-1"><a href="#1-结构框图-1" class="headerlink" title="1.  结构框图"></a><strong>1.</strong>  <strong>结构框图</strong></h5><p><img src="https://s2.loli.net/2022/04/25/F5uv2X3mDbCPBy8.png" alt="13.png"></p>
<h5 id="2-流图分析"><a href="#2-流图分析" class="headerlink" title="2.流图分析"></a><strong>2.流图分析</strong></h5><h6 id="1-基本结构分析-2"><a href="#1-基本结构分析-2" class="headerlink" title="(1) 基本结构分析"></a><strong>(1)</strong> <strong>基本结构分析</strong></h6><p>该结构是存在交叉的，是无法直接使用符号表达式求解传递函数的，因此需要将结构框图简化。将H2后面的引出点进行前移，H2→H2 G3；</p>
<p>将H1最前面的比较点后移，H1→G1H1；下面是比较点和引出点移动后的结构框图：</p>
<p><img src="https://s2.loli.net/2022/04/25/I6dN7oYJUeQscRT.png" alt="14.png"></p>
<p>根据上面的等效结构框图，编程思路：</p>
<p>H2和G3串联H11;</p>
<p>G1和H1串联H22；</p>
<p>G2和H11,H22,H1构成负反馈结构G22；</p>
<p>G1,G22,G3构成串联结构G44;</p>
<p>G44与G4并联为整个系统结构sys；</p>
<h5 id="3-源代码-1"><a href="#3-源代码-1" class="headerlink" title="3.源代码"></a><strong>3.源代码</strong></h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc;<span class="comment">%清空命令行窗口</span></span><br><span class="line">syms H1 H2 H3 G1 G2 G3 G4;<span class="comment">%定义符号变量</span></span><br><span class="line">H11=H2*G3;<span class="comment">%H2、H3构成串联结构</span></span><br><span class="line">H22=G1*H1;<span class="comment">%G1和H1构成串联结构</span></span><br><span class="line">G22=G2/(<span class="number">1</span>+(H11-H22+H1)*G2);<span class="comment">%三个反馈并联，然后与G2构成总的负反馈</span></span><br><span class="line">G44=G1*G22*G3;<span class="comment">%三部分串联</span></span><br><span class="line">sys=G44+G4<span class="comment">%中间所有合并的结构与G4并联，不加分号控制台打印输出结果</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="4-实验结果-1"><a href="#4-实验结果-1" class="headerlink" title="4.实验结果"></a>4.实验结果</h5><p><img src="https://s2.loli.net/2022/04/25/xj1LgqPRoadMXT3.png" alt="15.png"></p>
<p>与实际计算结果完全一致</p>
<h4 id="四、-实验心得与收获"><a href="#四、-实验心得与收获" class="headerlink" title="四、  实验心得与收获"></a><strong>四、</strong>  <strong>实验心得与收获</strong></h4><p>略</p>
]]></content>
      <categories>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>自动控制原理实验</tag>
      </tags>
  </entry>
  <entry>
    <title>山东大学FPGA实验1-加法器设计</title>
    <url>/2022/04/24/%E5%B1%B1%E4%B8%9C%E5%A4%A7%E5%AD%A6FPGA%E5%AE%9E%E9%AA%8C1-%E5%8A%A0%E6%B3%95%E5%99%A8%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="实验一、二-层次化方法，设计一个16位二进制全加器模块"><a href="#实验一、二-层次化方法，设计一个16位二进制全加器模块" class="headerlink" title="实验一、二    层次化方法，设计一个16位二进制全加器模块"></a>实验一、二    层次化方法，设计一个16位二进制全加器模块</h2><h4 id="【实验内容及原理说明】"><a href="#【实验内容及原理说明】" class="headerlink" title="【实验内容及原理说明】"></a>【实验内容及原理说明】</h4><p>原理：</p>
<p>除本位两个加数以外，还要加上从低位来的进位数，称为全加器</p>
<p><strong>1位半加器</strong>：两个1位二进制数相加，称为半加，实现半加操作的电路，称为半加器。</p>
<p><strong>1位全加器</strong>：在半加器的基础上考虑到低位来的进位，就构成了全加器</p>
<p>框图：略</p>
<p>4位全加器：4位全加器可以采用４个１位全加器级联成穿行进位加法器的模式来实现</p>
<p>16位加法器由4个4位加法器依次连接组合而成</p>
<h4 id="【实验程序代码】"><a href="#【实验程序代码】" class="headerlink" title="【实验程序代码】"></a>【实验程序代码】</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">//************ 一位半加器************</span></span><br><span class="line"><span class="keyword">module</span> halfadder (S,C,A,B);  <span class="comment">//IEEE 1364—1995 Syntax</span></span><br><span class="line">   <span class="keyword">input</span>    A,B;   <span class="comment">//输入端口声明</span></span><br><span class="line">   <span class="keyword">output</span> S,C;   <span class="comment">//输出端口声明</span></span><br><span class="line">   <span class="keyword">xor</span> (S,A,B);   <span class="comment">//实例引用逻辑门原语</span></span><br><span class="line">   <span class="keyword">and</span> (C,A,B);</span><br><span class="line"><span class="keyword">endmodule</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">//************ 一位全加器************</span></span><br><span class="line"><span class="keyword">module</span> fulladder (Sum,Co,A,B,Ci);</span><br><span class="line">   <span class="keyword">input</span> A,B,Ci;         <span class="keyword">output</span> Sum,Co;</span><br><span class="line">   <span class="keyword">wire</span> S1,D1,D2;           <span class="comment">//内部节点信号声明</span></span><br><span class="line">    halfadder HA1 ( <span class="variable">.B</span>(B), <span class="variable">.S</span>(S1), <span class="variable">.C</span>(D1), <span class="variable">.A</span>(A) );        <span class="comment">//实例引用底层模块halfadder</span></span><br><span class="line">    halfadder HA2 ( <span class="variable">.A</span>(S1), <span class="variable">.B</span>(Ci), <span class="variable">.S</span>(Sum), <span class="variable">.C</span>(D2) );  <span class="comment">//端口信号按照名称对应关联</span></span><br><span class="line">    <span class="keyword">or</span> g1(Co,D2,D1);</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//************四位全加器************</span></span><br><span class="line"><span class="keyword">module</span> _4bit_adder (S,C3,A,B,C_1);</span><br><span class="line">   <span class="keyword">input</span>   [<span class="number">3</span>:<span class="number">0</span>]  A,B;</span><br><span class="line">   <span class="keyword">input</span>            C_1;</span><br><span class="line">   <span class="keyword">output</span> [<span class="number">3</span>:<span class="number">0</span>] S; </span><br><span class="line">   <span class="keyword">output</span>          C3;</span><br><span class="line">   <span class="keyword">wire</span> C0,C1,C2;  <span class="comment">//声明模块内部的连接线</span></span><br><span class="line">   fulladder  U0_FA (S[<span class="number">0</span>],C0,A[<span class="number">0</span>],B[<span class="number">0</span>],C_1); <span class="comment">//实例引用模块fulladder</span></span><br><span class="line">   fulladder  U1_FA (S[<span class="number">1</span>],C1,A[<span class="number">1</span>],B[<span class="number">1</span>],C0);  <span class="comment">//端口信号按照位置顺序对应关联</span></span><br><span class="line">   fulladder  U2_FA (S[<span class="number">2</span>],C2,A[<span class="number">2</span>],B[<span class="number">2</span>],C1); </span><br><span class="line">   fulladder  U3_FA (S[<span class="number">3</span>],C3,A[<span class="number">3</span>],B[<span class="number">3</span>],C2);</span><br><span class="line"><span class="keyword">endmodule</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//************16位全加器************</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> _16bit_adder (S, Cout,A,B, Cin);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">input</span>   [<span class="number">15</span>:<span class="number">0</span>]  A;</span><br><span class="line">   <span class="keyword">input</span>   [<span class="number">15</span>:<span class="number">0</span>]  B; </span><br><span class="line">   <span class="keyword">input</span>           Cin; </span><br><span class="line">   <span class="keyword">output</span>  [<span class="number">15</span>:<span class="number">0</span>]  S; </span><br><span class="line">   <span class="keyword">output</span>         Cout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> C0,C1,C2;  <span class="comment">//声明模块内部的连接线   </span></span><br><span class="line">_4bit_adder adder4b0 (S[<span class="number">3</span>:<span class="number">0</span>],C0,A[<span class="number">3</span>:<span class="number">0</span>],B[<span class="number">3</span>:<span class="number">0</span>],Cin);</span><br><span class="line">_4bit_adder adder4b1 (S[<span class="number">7</span>:<span class="number">4</span>],C1,A[<span class="number">7</span>:<span class="number">4</span>],B[<span class="number">7</span>:<span class="number">4</span>],C0);</span><br><span class="line">_4bit_adder adder4b2 (S[<span class="number">11</span>:<span class="number">8</span>],C2,A[<span class="number">11</span>:<span class="number">8</span>],B[<span class="number">11</span>:<span class="number">8</span>],C1);</span><br><span class="line">_4bit_adder adder4b3 (S[<span class="number">15</span>:<span class="number">12</span>],Cout,A[<span class="number">15</span>:<span class="number">12</span>],B[<span class="number">15</span>:<span class="number">12</span>],C2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<h4 id="【激励块代码-testbench】"><a href="#【激励块代码-testbench】" class="headerlink" title="【激励块代码-testbench】"></a>【激励块代码-testbench】</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 16-bit adder testbench</span></span><br><span class="line"></span><br><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1ns/100ps </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> adder_16bit_tb();</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">15</span>:<span class="number">0</span>]  a;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">15</span>:<span class="number">0</span>]  b;</span><br><span class="line"><span class="keyword">reg</span>         cin;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">15</span>:<span class="number">0</span>] s;</span><br><span class="line"><span class="keyword">wire</span>        cout;</span><br><span class="line"></span><br><span class="line">adder_16bit dut(s, cout,a, b, cin);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test vectors</span></span><br><span class="line"><span class="keyword">initial</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0000</span>; cin=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//A[0], B[0], Cin, S[0], S=0001 cout=0</span></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0001</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0001</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0000</span>; cin=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//A[1], B[1], S[1]</span></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0002</span>; b=<span class="number">16&#x27;h0000</span>; cin=<span class="number">0</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0002</span>;</span><br><span class="line"><span class="comment">//A[2], B[2], S[2]</span></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0004</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0004</span>;</span><br><span class="line"><span class="comment">//A[3], B[3], S[3]</span></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0008</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0008</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0008</span>; b=<span class="number">16&#x27;h0008</span>;</span><br><span class="line"><span class="comment">//A[7:4], B[7:4], S[7,4]</span></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0010</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0010</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0020</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0020</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0040</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0040</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0080</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0080</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0080</span>; b=<span class="number">16&#x27;h0080</span>;</span><br><span class="line"><span class="comment">//A[11:8], B[11:8], S[11:8]</span></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0100</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0100</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0200</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0200</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0400</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0400</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0800</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0800</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0800</span>; b=<span class="number">16&#x27;h0800</span>;</span><br><span class="line"><span class="comment">//A[15:12], B[15:12], S[15:12]</span></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h1000</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h1000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h2000</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h2000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h4000</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h4000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h8000</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h8000</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h8000</span>; b=<span class="number">16&#x27;h8000</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0000</span>; cin=<span class="number">0</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;hFFFF</span>; b=<span class="number">16&#x27;h0000</span>; cin=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">100</span> <span class="built_in">$finish</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span></span><br><span class="line"> <span class="keyword">begin</span></span><br><span class="line">  <span class="built_in">$dumpfile</span>(<span class="string">&quot;adder_16bit_tb_results.vcd&quot;</span>);  </span><br><span class="line">  <span class="built_in">$dumpvars</span>; </span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<h4 id="【仿真波形图】"><a href="#【仿真波形图】" class="headerlink" title="【仿真波形图】"></a>【仿真波形图】</h4><p><img src="https://s2.loli.net/2022/04/25/ydlIMhfrvDE5Tix.png" alt="1jieguo.png"></p>
<h4 id="【RTL门级电路】"><a href="#【RTL门级电路】" class="headerlink" title="【RTL门级电路】"></a>【RTL门级电路】</h4><p><img src="https://s2.loli.net/2022/04/25/qIkoHn1wQd3WKxP.png" alt="1RTL.png"></p>
<h2 id="实验三-16位超前二进制全加器"><a href="#实验三-16位超前二进制全加器" class="headerlink" title="实验三    16位超前二进制全加器"></a>实验三    16位超前二进制全加器</h2><h4 id="【实验内容及原理说明】-1"><a href="#【实验内容及原理说明】-1" class="headerlink" title="【实验内容及原理说明】"></a>【实验内容及原理说明】</h4><p>设计一个16位二进制全加器模块</p>
<p>原理： 加法运算是最基本的运算，所有其他的算术运算都是以加法为基础。但是因为加法运算存在进位问题，使得某一位计算结果的得出和所有低位相关，因此，为了减少进位传输所耗的时间提高计算速度和计算精度，选择设计超前进位的全加器通过逻辑电路事先得出加到每一位全加器上的进位输入信号，而不是从低位开始逐位传递进位信号，这样就构成了超前进位全加器。</p>
<p>16位二进制超前全加器模块</p>
<p>一个较为简单的思路就是连续调用四次4位超前全加器模块</p>
<h4 id="【实验程序代码】-1"><a href="#【实验程序代码】-1" class="headerlink" title="【实验程序代码】"></a>【实验程序代码】</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> Adder(A,B,M,C0,Y,C4,PG,GG);</span><br><span class="line">	 </span><br><span class="line">	<span class="keyword">input</span> [<span class="number">15</span>:<span class="number">0</span>]A;</span><br><span class="line">	<span class="keyword">input</span> [<span class="number">15</span>:<span class="number">0</span>]B;</span><br><span class="line">	<span class="keyword">input</span> M,C0;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">output</span> [<span class="number">15</span>:<span class="number">0</span>]Y;</span><br><span class="line">	<span class="keyword">output</span> C4,PG,GG;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">wire</span> [<span class="number">4</span>:<span class="number">0</span>]C;</span><br><span class="line">	<span class="keyword">wire</span> [<span class="number">3</span>:<span class="number">0</span>]P;</span><br><span class="line">	<span class="keyword">wire</span> [<span class="number">3</span>:<span class="number">0</span>]G;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">assign</span> C[<span class="number">0</span>] = C0;</span><br><span class="line">	<span class="keyword">assign</span> C4 = C[<span class="number">4</span>];</span><br><span class="line">	</span><br><span class="line">	Adder4bit a4_0(M,A[<span class="number">3</span>:<span class="number">0</span>],B[<span class="number">3</span>:<span class="number">0</span>],C[<span class="number">0</span>],P[<span class="number">0</span>],G[<span class="number">0</span>],Y[<span class="number">3</span>:<span class="number">0</span>]);</span><br><span class="line">	Adder4bit a4_1(M,A[<span class="number">7</span>:<span class="number">4</span>],B[<span class="number">7</span>:<span class="number">4</span>],C[<span class="number">1</span>],P[<span class="number">1</span>],G[<span class="number">1</span>],Y[<span class="number">7</span>:<span class="number">4</span>]);</span><br><span class="line">	Adder4bit a4_2(M,A[<span class="number">11</span>:<span class="number">8</span>],B[<span class="number">11</span>:<span class="number">8</span>],C[<span class="number">2</span>],P[<span class="number">2</span>],G[<span class="number">2</span>],Y[<span class="number">11</span>:<span class="number">8</span>]);</span><br><span class="line">	Adder4bit a4_3(M,A[<span class="number">15</span>:<span class="number">12</span>],B[<span class="number">15</span>:<span class="number">12</span>],C[<span class="number">3</span>],P[<span class="number">3</span>],G[<span class="number">3</span>],Y[<span class="number">15</span>:<span class="number">12</span>]);</span><br><span class="line">	</span><br><span class="line">	CLU clu(P,G,C[<span class="number">0</span>],PG,GG,C[<span class="number">4</span>:<span class="number">1</span>]);</span><br><span class="line">	</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//四位超前加法器</span></span><br><span class="line"><span class="keyword">module</span> Adder4bit(M,A,B,C0,PG,GG,Y,C4);</span><br><span class="line">	<span class="comment">//This is 4bit CLA adder</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">input</span> [<span class="number">3</span>:<span class="number">0</span>]A;</span><br><span class="line">	<span class="keyword">input</span> [<span class="number">3</span>:<span class="number">0</span>]B;</span><br><span class="line">	<span class="keyword">input</span> M,C0;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">output</span> [<span class="number">3</span>:<span class="number">0</span>]Y;</span><br><span class="line">	<span class="keyword">output</span> C4,PG,GG;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">wire</span> [<span class="number">4</span>:<span class="number">0</span>]C;</span><br><span class="line">	<span class="keyword">wire</span> [<span class="number">3</span>:<span class="number">0</span>]P;</span><br><span class="line">	<span class="keyword">wire</span> [<span class="number">3</span>:<span class="number">0</span>]G;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">assign</span> C[<span class="number">0</span>] = C0;</span><br><span class="line">	<span class="keyword">assign</span> C4 = C[<span class="number">4</span>];</span><br><span class="line">	</span><br><span class="line">	bit_full_adder fa_0(M,A[<span class="number">0</span>],B[<span class="number">0</span>],C[<span class="number">0</span>],P[<span class="number">0</span>],G[<span class="number">0</span>],Y[<span class="number">0</span>]);</span><br><span class="line">	bit_full_adder fa_1(M,A[<span class="number">1</span>],B[<span class="number">1</span>],C[<span class="number">1</span>],P[<span class="number">1</span>],G[<span class="number">1</span>],Y[<span class="number">1</span>]);</span><br><span class="line">	bit_full_adder fa_2(M,A[<span class="number">2</span>],B[<span class="number">2</span>],C[<span class="number">2</span>],P[<span class="number">2</span>],G[<span class="number">2</span>],Y[<span class="number">2</span>]);</span><br><span class="line">	bit_full_adder fa_3(M,A[<span class="number">3</span>],B[<span class="number">3</span>],C[<span class="number">3</span>],P[<span class="number">3</span>],G[<span class="number">3</span>],Y[<span class="number">3</span>]);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Carry Look Ahead Unit.</span></span><br><span class="line">	CLU clu(P,G,C[<span class="number">0</span>],PG,GG,C[<span class="number">4</span>:<span class="number">1</span>]);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//全加器模块</span></span><br><span class="line"><span class="keyword">module</span> bit_full_adder(M,A,B,C,P,G,S);</span><br><span class="line">	<span class="comment">//Full adder and subtractor whit the mode selection.</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">input</span> A,B,C,M;</span><br><span class="line">	<span class="keyword">output</span> P,G,S;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">assign</span> P = M^A^B;</span><br><span class="line">	<span class="keyword">assign</span> G = (M^A)&amp;B;</span><br><span class="line">	<span class="keyword">assign</span> S = A^B^C;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> CLU(P,G,C0,PG,GG,C1to4);</span><br><span class="line">	<span class="comment">//Common Carry Look Ahead Unit.</span></span><br><span class="line">	<span class="comment">//Used by every adder layer.</span></span><br><span class="line">	<span class="keyword">input</span> [<span class="number">3</span>:<span class="number">0</span>]P;</span><br><span class="line">	<span class="keyword">input</span> [<span class="number">3</span>:<span class="number">0</span>]G;</span><br><span class="line">	<span class="keyword">input</span> C0;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">output</span> PG,GG;</span><br><span class="line">	<span class="keyword">output</span> [<span class="number">4</span>:<span class="number">1</span>]C1to4;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">wire</span> [<span class="number">4</span>:<span class="number">0</span>]C;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">assign</span> C1to4 = C[<span class="number">4</span>:<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">assign</span> PG = &amp;P;</span><br><span class="line">	<span class="keyword">assign</span> GG = G[<span class="number">3</span>]|(G[<span class="number">2</span>]&amp;P[<span class="number">3</span>])|(G[<span class="number">1</span>]&amp;P[<span class="number">3</span>]&amp;P[<span class="number">2</span>])|(G[<span class="number">0</span>]&amp;P[<span class="number">3</span>]&amp;P[<span class="number">2</span>]&amp;P[<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">assign</span> C[<span class="number">1</span>] = G[<span class="number">0</span>]|(P[<span class="number">0</span>]&amp;C0);</span><br><span class="line">	<span class="keyword">assign</span> C[<span class="number">2</span>] = G[<span class="number">1</span>]|(G[<span class="number">0</span>]&amp;P[<span class="number">1</span>])|(C0&amp;P[<span class="number">0</span>]&amp;P[<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">assign</span> C[<span class="number">3</span>] = G[<span class="number">2</span>]|(G[<span class="number">1</span>]&amp;P[<span class="number">2</span>])|(G[<span class="number">0</span>]&amp;P[<span class="number">1</span>]&amp;P[<span class="number">2</span>])|(C0&amp;P[<span class="number">0</span>]&amp;P[<span class="number">1</span>]&amp;P[<span class="number">2</span>]);</span><br><span class="line">	<span class="keyword">assign</span> C[<span class="number">4</span>] = G[<span class="number">3</span>]|(G[<span class="number">2</span>]&amp;P[<span class="number">3</span>])|(G[<span class="number">1</span>]&amp;P[<span class="number">2</span>]&amp;P[<span class="number">3</span>])|(G[<span class="number">0</span>]&amp;P[<span class="number">1</span>]&amp;P[<span class="number">2</span>]&amp;P[<span class="number">3</span>])|(C0&amp;P[<span class="number">0</span>]&amp;P[<span class="number">1</span>]&amp;P[<span class="number">2</span>]&amp;P[<span class="number">3</span>]);</span><br><span class="line">	</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<h4 id="【激励代码-testbench】"><a href="#【激励代码-testbench】" class="headerlink" title="【激励代码-testbench】"></a>【激励代码-testbench】</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1ns/100ps </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> _16bit_adder_ahead_tb();</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">15</span>:<span class="number">0</span>]  a;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">15</span>:<span class="number">0</span>]  b;</span><br><span class="line"><span class="keyword">reg</span>         cin;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">15</span>:<span class="number">0</span>] s;</span><br><span class="line"><span class="keyword">wire</span>        C4;</span><br><span class="line"><span class="keyword">wire</span>        PG;</span><br><span class="line"><span class="keyword">wire</span>        GG;</span><br><span class="line"></span><br><span class="line">Adder dut (a,b,<span class="number">0</span>,cin,s,C4,PG,GG);</span><br><span class="line"><span class="comment">// Test vectors</span></span><br><span class="line"><span class="keyword">initial</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0000</span>; cin=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//A[0], B[0], Cin, S[0], S=0001 </span></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0001</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0001</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0000</span>; cin=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//A[1], B[1], S[1]</span></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0002</span>; b=<span class="number">16&#x27;h0000</span>; cin=<span class="number">0</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0002</span>;</span><br><span class="line"><span class="comment">//A[2], B[2], S[2]</span></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0004</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0004</span>;</span><br><span class="line"><span class="comment">//A[3], B[3], S[3]</span></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0008</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0008</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0008</span>; b=<span class="number">16&#x27;h0008</span>;</span><br><span class="line"><span class="comment">//A[7:4], B[7:4], S[7,4]</span></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0010</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0010</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0020</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0020</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0040</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0040</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0080</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0080</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0080</span>; b=<span class="number">16&#x27;h0080</span>;</span><br><span class="line"><span class="comment">//A[11:8], B[11:8], S[11:8]</span></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0100</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0100</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0200</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0200</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0400</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0400</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0800</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0800</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0800</span>; b=<span class="number">16&#x27;h0800</span>;</span><br><span class="line"><span class="comment">//A[15:12], B[15:12], S[15:12]</span></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h1000</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h1000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h2000</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h2000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h4000</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h4000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h8000</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h8000</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h8000</span>; b=<span class="number">16&#x27;h8000</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0000</span>; cin=<span class="number">0</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;hFFFF</span>; b=<span class="number">16&#x27;h0000</span>; cin=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">100</span> <span class="built_in">$finish</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<h4 id="【仿真波形图】-1"><a href="#【仿真波形图】-1" class="headerlink" title="【仿真波形图】"></a>【仿真波形图】</h4><p><img src="https://s2.loli.net/2022/04/25/6zaYoXPxJ5ArOj1.png" alt="2.1jieguo.png"></p>
<p><img src="https://s2.loli.net/2022/04/25/C4BcUl9J1IXLFwk.png" alt="2.2jieguo.png"></p>
<h4 id="【RTL门级电路】-1"><a href="#【RTL门级电路】-1" class="headerlink" title="【RTL门级电路】"></a>【RTL门级电路】</h4><p><img src="https://s2.loli.net/2022/04/25/LAWcZHPlrEywQ2a.png" alt="2RTL.png"></p>
<h2 id="实验四-16bit的8421-BCD码全加器"><a href="#实验四-16bit的8421-BCD码全加器" class="headerlink" title="实验四    16bit的8421-BCD码全加器"></a>实验四    16bit的8421-BCD码全加器</h2><h4 id="【实验内容及原理说明】-2"><a href="#【实验内容及原理说明】-2" class="headerlink" title="【实验内容及原理说明】"></a>【实验内容及原理说明】</h4><p>BCD码加法器计算两个四位二进制数的相加值，</p>
<p>由9个输入端和5个输出端组成，分为相加，修正判别和修正三个阶段。</p>
<p>（1）在相加值为0-9时，BCD码与四位二进制码相同，</p>
<p>（2）当值为10-15时，BCD码等于四位二进制码加上“0110”。</p>
<p>（3）若相加和在16-18之间，向高位进位会在相加过程中自己产生，对本位还要进行加6修正</p>
<p>这里的BCD8421全加器的加法部分和前面用到的4位全加器模块相同，对结果进行判断，并转化成8421码的形式即可。</p>
<h4 id="【实验程序代码】-2"><a href="#【实验程序代码】-2" class="headerlink" title="【实验程序代码】"></a>【实验程序代码】</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4-bit 8421-BCD码全加器模块</span></span><br><span class="line"><span class="keyword">module</span> bcd(sum,cout,ina,inb,cin);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">input</span> cin;</span><br><span class="line"> <span class="keyword">input</span> [<span class="number">3</span>:<span class="number">0</span>] ina,inb;</span><br><span class="line"> <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] sum; <span class="comment">//等价于output [3:0] sum;reg [3:0] sum;</span></span><br><span class="line"> <span class="keyword">output</span> <span class="keyword">reg</span> cout;</span><br><span class="line"> <span class="keyword">reg</span> [<span class="number">4</span>:<span class="number">0</span>] temp;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">always</span> @(ina, inb, cin)</span><br><span class="line">   <span class="keyword">begin</span></span><br><span class="line">      temp&lt;=ina+inb+cin;</span><br><span class="line">      <span class="keyword">if</span>(temp&gt;<span class="number">9</span>)</span><br><span class="line">        &#123;cout,sum&#125;&lt;=temp+<span class="number">6</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        &#123;cout,sum&#125;&lt;=temp;</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//顶层模块</span></span><br><span class="line"><span class="keyword">module</span> bcd_adder_16 ( S,Cout,A,B, Cin);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">input</span>   [<span class="number">15</span>:<span class="number">0</span>]  A;</span><br><span class="line">   <span class="keyword">input</span>   [<span class="number">15</span>:<span class="number">0</span>]  B; </span><br><span class="line">   <span class="keyword">input</span>           Cin; </span><br><span class="line">   <span class="keyword">output</span>   [<span class="number">15</span>:<span class="number">0</span>]  S; </span><br><span class="line">   <span class="keyword">output</span>         Cout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> C0,C1,C2;  <span class="comment">//声明模块内部的连接线   </span></span><br><span class="line">bcd adder4b0 (S[<span class="number">3</span>:<span class="number">0</span>],C0,A[<span class="number">3</span>:<span class="number">0</span>],B[<span class="number">3</span>:<span class="number">0</span>],Cin);</span><br><span class="line">bcd adder4b1 (S[<span class="number">7</span>:<span class="number">4</span>],C1,A[<span class="number">7</span>:<span class="number">4</span>],B[<span class="number">7</span>:<span class="number">4</span>],C0);</span><br><span class="line">bcd adder4b2 (S[<span class="number">11</span>:<span class="number">8</span>],C2,A[<span class="number">11</span>:<span class="number">8</span>],B[<span class="number">11</span>:<span class="number">8</span>],C1);</span><br><span class="line">bcd adder4b3 (S[<span class="number">15</span>:<span class="number">12</span>],Cout,A[<span class="number">15</span>:<span class="number">12</span>],B[<span class="number">15</span>:<span class="number">12</span>],C2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<h4 id="【激励代码-testbench】-1"><a href="#【激励代码-testbench】-1" class="headerlink" title="【激励代码-testbench】"></a>【激励代码-testbench】</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 16-bit 8421-bcd adder testbench</span></span><br><span class="line"></span><br><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1ns/100ps </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> bcd_adder_16bit_tb();</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">15</span>:<span class="number">0</span>]  a;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">15</span>:<span class="number">0</span>]  b;</span><br><span class="line"><span class="keyword">reg</span>         cin;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">15</span>:<span class="number">0</span>] s;</span><br><span class="line"><span class="keyword">wire</span>        cout;</span><br><span class="line"></span><br><span class="line">bcd_adder_16 dut(s, cout,a, b, cin);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test vectors</span></span><br><span class="line"><span class="keyword">initial</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0000</span>; cin=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//A[0], B[0], Cin, S[0], S=0001 cout=0</span></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0001</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0001</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0000</span>; cin=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//A[1], B[1], S[1]</span></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0002</span>; b=<span class="number">16&#x27;h0000</span>; cin=<span class="number">0</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0002</span>;</span><br><span class="line"><span class="comment">//A[2], B[2], S[2]</span></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0004</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0004</span>;</span><br><span class="line"><span class="comment">//A[3], B[3], S[3]</span></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0008</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0008</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0008</span>; b=<span class="number">16&#x27;h0008</span>;</span><br><span class="line"><span class="comment">//A[7:4], B[7:4], S[7,4]</span></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0010</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0010</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0020</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0020</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0040</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0040</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0080</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0080</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0080</span>; b=<span class="number">16&#x27;h0080</span>;</span><br><span class="line"><span class="comment">//A[11:8], B[11:8], S[11:8]</span></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0100</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0100</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0200</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0200</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0400</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0400</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0800</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0800</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0800</span>; b=<span class="number">16&#x27;h0800</span>;</span><br><span class="line"><span class="comment">//A[15:12], B[15:12], S[15:12]</span></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h1000</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h1000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h2000</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h2000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h4000</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h4000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h8000</span>; b=<span class="number">16&#x27;h0000</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h8000</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h8000</span>; b=<span class="number">16&#x27;h8000</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;h0000</span>; b=<span class="number">16&#x27;h0000</span>; cin=<span class="number">0</span>;</span><br><span class="line">#<span class="number">100</span> a=<span class="number">16&#x27;hFFFF</span>; b=<span class="number">16&#x27;h0000</span>; cin=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">100</span> <span class="built_in">$finish</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="【仿真波形图】-2"><a href="#【仿真波形图】-2" class="headerlink" title="【仿真波形图】"></a>【仿真波形图】</h4><p><img src="https://s2.loli.net/2022/04/25/MxpHKX8NRtzLgBo.png" alt="3jieguo.png"></p>
<h4 id="【门级电路图】"><a href="#【门级电路图】" class="headerlink" title="【门级电路图】"></a>【门级电路图】</h4><p><img src="https://s2.loli.net/2022/04/25/cxCzyboJ4jm32Vr.png" alt="3RTL.png"></p>
<h1 id="实验结果分析以及思考"><a href="#实验结果分析以及思考" class="headerlink" title="实验结果分析以及思考"></a>实验结果分析以及思考</h1><p>略</p>
]]></content>
      <categories>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>FPGA实验</tag>
      </tags>
  </entry>
  <entry>
    <title>利用DNS加快GitHub、Steam等平台的访问速度</title>
    <url>/2022/04/27/%E5%88%A9%E7%94%A8DNS%E5%8A%A0%E5%BF%ABGitHub%E3%80%81Steam%E7%AD%89%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="利用DNS加速各平台的访问速度"><a href="#利用DNS加速各平台的访问速度" class="headerlink" title="利用DNS加速各平台的访问速度"></a>利用DNS加速各平台的访问速度</h2><h3 id="一、国内访问GitHub，Steam等平台慢的原因"><a href="#一、国内访问GitHub，Steam等平台慢的原因" class="headerlink" title="一、国内访问GitHub，Steam等平台慢的原因"></a>一、国内访问GitHub，Steam等平台慢的原因</h3><p>GitHub的<a href="https://so.csdn.net/so/search?q=CDN&amp;spm=1001.2101.3001.7020">CDN</a>(Content Delivery Network,即内容分发网络)域名遭到DNS污染，无法连接使用GitHub的加速分发服务器，所以国内访问速度较慢。</p>
<h3 id="二、解决方法"><a href="#二、解决方法" class="headerlink" title="二、解决方法"></a>二、解决方法</h3><p>修改Hosts文件，将域名解析直接指向IP地址，绕过DNS解析</p>
<p>具体可参考<a href="https://www.cnblogs.com/liuchao888/p/11733996.html">GitHub访问速度慢的一种优化方法 - 西风鬼 - 博客园 (cnblogs.com)</a></p>
<p>这里给出一款好用的开源免费软件</p>
<p>链接：<a href="https://pan.baidu.com/s/1_YRNkUSLnj7LFhDt8GPhYw?pwd=sduj">https://pan.baidu.com/s/1_YRNkUSLnj7LFhDt8GPhYw?pwd=sduj</a><br>提取码：sduj </p>
<p>解压后即可使用，使用简单</p>
<p>选择需要加速的应用，解析到对应IP即可</p>
<h3 id="三、结语"><a href="#三、结语" class="headerlink" title="三、结语"></a>三、结语</h3><p>加速访问GitHub、Steam等平台的方法很多，本文提供的仅为个人观点。</p>
]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>山东大学FPGA实验2 编码器和译码器设计</title>
    <url>/2022/04/25/%E5%B1%B1%E4%B8%9C%E5%A4%A7%E5%AD%A6FPGA%E5%AE%9E%E9%AA%8C2-%E7%BC%96%E7%A0%81%E5%99%A8%E5%92%8C%E8%AF%91%E7%A0%81%E5%99%A8%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="实验一-8-3线优先编码器"><a href="#实验一-8-3线优先编码器" class="headerlink" title="实验一    8-3线优先编码器"></a>实验一    8-3线优先编码器</h2><h4 id="【实验内容及原理说明】"><a href="#【实验内容及原理说明】" class="headerlink" title="【实验内容及原理说明】"></a>【实验内容及原理说明】</h4><p>框图：</p>
<p><img src="https://s2.loli.net/2022/04/25/3Vt28vEecjyd7ro.png" alt="1.8-3.png"></p>
<p>真值表：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>D7</th>
<th>D6</th>
<th>D5</th>
<th>D4</th>
<th>D3</th>
<th>D2</th>
<th>D1</th>
<th>D0</th>
<th>Q2</th>
<th>Q1</th>
<th>Q0</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
</div>
<p>优先编码器的功能是允许同时在几个输入端有输入信号，编码器按照输入信号预先排定的优先顺序，只对同时输入的几个信号中有优先权高位的一个信号编码。</p>
<h4 id="【实验程序代码】"><a href="#【实验程序代码】" class="headerlink" title="【实验程序代码】"></a>【实验程序代码】</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> Encoder8_3(En,I,Y,GS);</span><br><span class="line">	<span class="keyword">input</span> En;</span><br><span class="line">	<span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] I;</span><br><span class="line">	<span class="keyword">output</span> [<span class="number">2</span>:<span class="number">0</span>] Y;</span><br><span class="line">	<span class="keyword">output</span> <span class="keyword">reg</span> GS;</span><br><span class="line">	<span class="keyword">reg</span> [<span class="number">2</span>:<span class="number">0</span>] Out_coding;</span><br><span class="line">	<span class="keyword">assign</span> Y=Out_coding;</span><br><span class="line">	<span class="keyword">always</span> @(I <span class="keyword">or</span> En)</span><br><span class="line">	<span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(~En)</span><br><span class="line">	<span class="keyword">begin</span> Out_coding=<span class="number">3&#x27;b000</span>;GS=<span class="number">1&#x27;b0</span>;<span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">	GS=<span class="number">1&#x27;b1</span>;</span><br><span class="line">	<span class="keyword">casez</span>(I)</span><br><span class="line">	<span class="number">8&#x27;b1</span>???_????:Out_coding=<span class="number">3&#x27;b111</span>;</span><br><span class="line">	<span class="number">8&#x27;b01</span>??_????:Out_coding=<span class="number">3&#x27;b110</span>;</span><br><span class="line">	<span class="number">8&#x27;b001</span>?_????:Out_coding=<span class="number">3&#x27;b101</span>;</span><br><span class="line">	<span class="number">8&#x27;b0001_</span>????:Out_coding=<span class="number">3&#x27;b100</span>;</span><br><span class="line">	<span class="number">8&#x27;b0000_1</span>???:Out_coding=<span class="number">3&#x27;b011</span>;</span><br><span class="line">	<span class="number">8&#x27;b0000_01</span>??:Out_coding=<span class="number">3&#x27;b010</span>;</span><br><span class="line">	<span class="number">8&#x27;b0000_001</span>?:Out_coding=<span class="number">3&#x27;b001</span>;</span><br><span class="line">	<span class="number">8&#x27;b0000_0001</span>:Out_coding=<span class="number">3&#x27;b000</span>;</span><br><span class="line">	<span class="number">8&#x27;b0000_0000</span>:<span class="keyword">begin</span> Out_coding=<span class="number">3&#x27;b000</span>;GS=<span class="number">1&#x27;b0</span>;<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">default</span>:<span class="keyword">begin</span> Out_coding=<span class="number">3&#x27;b000</span>;GS=<span class="number">1&#x27;b0</span>;<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="【testbench激励代码】"><a href="#【testbench激励代码】" class="headerlink" title="【testbench激励代码】"></a>【testbench激励代码】</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> encoder8_3_tb;</span><br><span class="line"><span class="comment">// Inputs</span></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] in;</span><br><span class="line"><span class="keyword">reg</span> EI;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Outputs</span></span><br><span class="line"><span class="keyword">wire</span> [<span class="number">2</span>:<span class="number">0</span>] Y;</span><br><span class="line"><span class="keyword">wire</span> GS;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Instantiate the Unit Under Test (UUT)</span></span><br><span class="line">Encoder8_3 uut (</span><br><span class="line">	<span class="variable">.En</span>(EI), </span><br><span class="line">	<span class="variable">.I</span>(in), </span><br><span class="line">	<span class="variable">.Y</span>(bout),  </span><br><span class="line">	<span class="variable">.GS</span>(GS)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">	<span class="comment">// Initialize Inputs</span></span><br><span class="line">	in = <span class="number">0</span>;</span><br><span class="line">	EI = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Wait 100 ns for global reset to finish</span></span><br><span class="line">	#<span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// Add stimulus here</span></span><br><span class="line">	in=<span class="number">8&#x27;b0011_1111</span>;</span><br><span class="line">	EI=<span class="number">1&#x27;b1</span>;</span><br><span class="line">	#<span class="number">100</span>;</span><br><span class="line">	in=<span class="number">8&#x27;b1011_1001</span>;</span><br><span class="line">	#<span class="number">100</span>;</span><br><span class="line">	in=<span class="number">8&#x27;b1101_1001</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="【仿真波形图】"><a href="#【仿真波形图】" class="headerlink" title="【仿真波形图】"></a>【仿真波形图】</h4><p>Modelsim仿真波形图如下图：</p>
<p><img src="https://s2.loli.net/2022/04/25/hQ9Cm4KEuW5vk7O.png" alt="1simulation.png"></p>
<h4 id="【RTL门级电路图】"><a href="#【RTL门级电路图】" class="headerlink" title="【RTL门级电路图】"></a>【RTL门级电路图】</h4><p><img src="https://s2.loli.net/2022/04/25/TPMuDKa8nI61cJm.png" alt="1RTL.png"></p>
<h2 id="实验二-3-8线译码器"><a href="#实验二-3-8线译码器" class="headerlink" title="实验二    3-8线译码器"></a>实验二    3-8线译码器</h2><h4 id="【实验内容及原理说明】-1"><a href="#【实验内容及原理说明】-1" class="headerlink" title="【实验内容及原理说明】"></a>【实验内容及原理说明】</h4><p>框图：</p>
<p><img src="https://s2.loli.net/2022/04/25/TLDntVKloFNIqXc.jpg" alt="2.3-8.jpg"></p>
<p>真值表：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>G1</th>
<th>G2A</th>
<th>G2B</th>
<th>C</th>
<th>B</th>
<th>A</th>
<th>Y0</th>
<th>Y1</th>
<th>Y2</th>
<th>Y3</th>
<th>Y4</th>
<th>Y5</th>
<th>Y6</th>
<th>Y7</th>
</tr>
</thead>
<tbody>
<tr>
<td>X</td>
<td>1</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>X</td>
<td>X</td>
<td>1</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td></td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
</tbody>
</table>
</div>
<h4 id="【实验程序代码】-1"><a href="#【实验程序代码】-1" class="headerlink" title="【实验程序代码】"></a>【实验程序代码】</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> Decoder3_8(A,En,Y);</span><br><span class="line"><span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] A;</span><br><span class="line"><span class="keyword">input</span> En;</span><br><span class="line"><span class="keyword">output</span> [<span class="number">7</span>:<span class="number">0</span>] Y;</span><br><span class="line"><span class="keyword">assign</span> Y[<span class="number">0</span>]=~(En &amp; ~A[<span class="number">2</span>] &amp; ~A[<span class="number">1</span>] &amp;~A[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">assign</span> Y[<span class="number">1</span>]=~(En &amp; ~A[<span class="number">2</span>] &amp; ~A[<span class="number">1</span>] &amp; A[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">assign</span> Y[<span class="number">2</span>]=~(En &amp; ~A[<span class="number">2</span>] &amp;  A[<span class="number">1</span>] &amp;~A[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">assign</span> Y[<span class="number">3</span>]=~(En &amp; ~A[<span class="number">2</span>] &amp;  A[<span class="number">1</span>] &amp; A[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">assign</span> Y[<span class="number">4</span>]=~(En &amp;  A[<span class="number">2</span>] &amp; ~A[<span class="number">1</span>] &amp;~A[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">assign</span> Y[<span class="number">5</span>]=~(En &amp;  A[<span class="number">2</span>] &amp; ~A[<span class="number">1</span>] &amp; A[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">assign</span> Y[<span class="number">6</span>]=~(En &amp;  A[<span class="number">2</span>] &amp;  A[<span class="number">1</span>] &amp;~A[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">assign</span> Y[<span class="number">7</span>]=~(En &amp;  A[<span class="number">2</span>] &amp;  A[<span class="number">1</span>] &amp; A[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="【testbench激励代码】-1"><a href="#【testbench激励代码】-1" class="headerlink" title="【testbench激励代码】"></a>【testbench激励代码】</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> decode_38_tb;</span><br><span class="line">	<span class="keyword">reg</span> A,B,C;</span><br><span class="line">	<span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] y;</span><br><span class="line">	<span class="keyword">wire</span> [<span class="number">2</span>:<span class="number">0</span>] a;</span><br><span class="line">	<span class="keyword">assign</span> a=&#123;A,B,C&#125;;</span><br><span class="line">	Decoder3_8 D(<span class="variable">.A</span>(a),<span class="variable">.Y</span>(y));</span><br><span class="line">	<span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">		A=<span class="number">0</span>;B=<span class="number">0</span>;C=<span class="number">0</span>;#<span class="number">100</span>;</span><br><span class="line">		A=<span class="number">0</span>;B=<span class="number">0</span>;C=<span class="number">1</span>;#<span class="number">100</span>;</span><br><span class="line">		A=<span class="number">0</span>;B=<span class="number">1</span>;C=<span class="number">0</span>;#<span class="number">100</span>;</span><br><span class="line">		A=<span class="number">0</span>;B=<span class="number">1</span>;C=<span class="number">1</span>;#<span class="number">100</span>;</span><br><span class="line">		A=<span class="number">1</span>;B=<span class="number">0</span>;C=<span class="number">0</span>;#<span class="number">100</span>;</span><br><span class="line">		A=<span class="number">1</span>;B=<span class="number">0</span>;C=<span class="number">1</span>;#<span class="number">100</span>;</span><br><span class="line">		A=<span class="number">1</span>;B=<span class="number">1</span>;C=<span class="number">0</span>;#<span class="number">100</span>;</span><br><span class="line">		A=<span class="number">1</span>;B=<span class="number">1</span>;C=<span class="number">1</span>;#<span class="number">100</span>;</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="【仿真波形图】-1"><a href="#【仿真波形图】-1" class="headerlink" title="【仿真波形图】"></a>【仿真波形图】</h4><p>Modelsim仿真波形图如下：</p>
<p><img src="https://s2.loli.net/2022/04/25/GC6JPslzNTA59be.png" alt="2simulation.png"></p>
<p>输入给定信号是有I0到I7增加的，可以看到译码输出与真值表结果相同。</p>
<h4 id="【门级电路图】"><a href="#【门级电路图】" class="headerlink" title="【门级电路图】"></a>【门级电路图】</h4><p>使用quartus生成的RTL视图：</p>
<p><img src="https://s2.loli.net/2022/04/25/krmTKuqIP8YGN1l.png" alt="2RTL.png"></p>
<h1 id="实验结果分析及思考"><a href="#实验结果分析及思考" class="headerlink" title="实验结果分析及思考"></a>实验结果分析及思考</h1><ol>
<li>在本次实验中复习了编码器和译码器的相关知识，并利用其原理通过VerilogHDL逻辑语言的形式实现。设计实验时，要求对数字逻辑电路有一定的掌握，否则也难以顺利完成。</li>
<li>略</li>
</ol>
]]></content>
      <tags>
        <tag>FPGA实验</tag>
      </tags>
  </entry>
  <entry>
    <title>我的博客</title>
    <url>/2022/04/24/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>欢迎来到我的博客</p>
<p>吾生也有涯，而知也无涯！</p>
]]></content>
  </entry>
  <entry>
    <title>山东大学FPGA实验3 计数器设计</title>
    <url>/2022/04/25/%E5%B1%B1%E4%B8%9C%E5%A4%A7%E5%AD%A6FPGA%E5%AE%9E%E9%AA%8C3-%E8%AE%A1%E6%95%B0%E5%99%A8%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="实验一-8位异步二进制计数器模块"><a href="#实验一-8位异步二进制计数器模块" class="headerlink" title="实验一    8位异步二进制计数器模块"></a>实验一    8位异步二进制计数器模块</h2><h4 id="【实验内容及原理说明】"><a href="#【实验内容及原理说明】" class="headerlink" title="【实验内容及原理说明】"></a>【实验内容及原理说明】</h4><p>同步和异步计数器的区别：</p>
<p>首先在触发信号方面，同步计数器的触发信号是同一个信号，也就是说，同步计数器每一级的触发器接的都是同一个CLK信号，而异步计数器的触发信号时不同的。</p>
<p>以4位异步2进制计数器为例进行说明介绍</p>
<p><img src="https://s2.loli.net/2022/04/25/4Ut9p8nLCygG1T5.png" alt="1frame.png"></p>
<p>第一个主模块作为设计的顶层，它实例引用分频器子模块_2Divider1共4次，第二个分频器子模块_2Divider1作为设计的底层。</p>
<p>根据这个思路，在后面加上相同的4个分频器子模块即可达到计数的要求。</p>
<h4 id="【实验程序代码】"><a href="#【实验程序代码】" class="headerlink" title="【实验程序代码】"></a>【实验程序代码】</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> counter2_8bit_asyn (Q,CP,CLR_); </span><br><span class="line">   <span class="keyword">output</span> [<span class="number">7</span>:<span class="number">0</span>] Q;  </span><br><span class="line">   <span class="keyword">input</span>        CP, CLR_;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例引用分频器模块 _2Divider1 </span></span><br><span class="line">   _2Divider1 FF0 (Q[<span class="number">0</span>],CP   ,CLR_); </span><br><span class="line">    <span class="comment">//注意, 引用时端口的排列顺序--位置关联</span></span><br><span class="line">   _2Divider1 FF1 (Q[<span class="number">1</span>],~Q[<span class="number">0</span>],CLR_);</span><br><span class="line">   _2Divider1 FF2 (Q[<span class="number">2</span>],~Q[<span class="number">1</span>],CLR_);</span><br><span class="line">   _2Divider1 FF3 (Q[<span class="number">3</span>],~Q[<span class="number">2</span>],CLR_);	</span><br><span class="line">	_2Divider1 FF4 (Q[<span class="number">4</span>],~Q[<span class="number">3</span>],CLR_);</span><br><span class="line">   _2Divider1 FF5 (Q[<span class="number">5</span>],~Q[<span class="number">4</span>],CLR_);</span><br><span class="line">   _2Divider1 FF6 (Q[<span class="number">6</span>],~Q[<span class="number">5</span>],CLR_);</span><br><span class="line">   _2Divider1 FF7 (Q[<span class="number">7</span>],~Q[<span class="number">6</span>],CLR_);</span><br><span class="line"><span class="keyword">endmodule</span> </span><br><span class="line"><span class="comment">//分频器子模块</span></span><br><span class="line"><span class="keyword">module</span> _2Divider1 (Q,CP,Rd_); </span><br><span class="line">   <span class="keyword">output</span> <span class="keyword">reg</span> Q;</span><br><span class="line">   <span class="keyword">input</span>      CP,Rd_;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">always</span> @(<span class="keyword">posedge</span> CP <span class="keyword">or</span> <span class="keyword">negedge</span> Rd_)</span><br><span class="line">    <span class="keyword">if</span>(!Rd_)  </span><br><span class="line">        Q &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">else</span>       </span><br><span class="line">        Q &lt;= ~Q;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="【testbench激励代码】"><a href="#【testbench激励代码】" class="headerlink" title="【testbench激励代码】"></a>【testbench激励代码】</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> test_counter2_8bit_asyn (); </span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span>        CLR_, CP;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] Q;</span><br><span class="line"></span><br><span class="line">counter2_8bit_asyn i1 (<span class="variable">.CLR_</span>(CLR_),<span class="variable">.CP</span>(CP),<span class="variable">.Q</span>(Q));</span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span>     <span class="comment">// CLR_</span></span><br><span class="line">  CLR_ = <span class="number">1&#x27;b0</span>;</span><br><span class="line">  CLR_ = #<span class="number">20</span> <span class="number">1&#x27;b1</span>;</span><br><span class="line">#<span class="number">400</span> <span class="built_in">$stop</span>;</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="keyword">always</span> <span class="keyword">begin</span>      <span class="comment">// CP</span></span><br><span class="line">CP = <span class="number">1&#x27;b0</span>;</span><br><span class="line">CP = #<span class="number">10</span> <span class="number">1&#x27;b1</span>;</span><br><span class="line">#<span class="number">10</span>;</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="【仿真波形图】"><a href="#【仿真波形图】" class="headerlink" title="【仿真波形图】"></a>【仿真波形图】</h4><p>Modelsim仿真波形图如下图：</p>
<p><img src="https://s2.loli.net/2022/04/25/619OfjlnrcyL3QT.png" alt="1simulation.png"></p>
<h4 id="【门级电路图】"><a href="#【门级电路图】" class="headerlink" title="【门级电路图】"></a>【门级电路图】</h4><p>使用quartus生成的RTL视图：</p>
<p><img src="https://s2.loli.net/2022/04/25/XYbdFfyeoMUIc2z.png" alt="1RTL.png"></p>
<p>可以看出，8个触发器只有第一个触发器与时钟脉冲CP相连，后面的触发器的脉冲输入为前一个触发器的输出（图中的画法为总线式）</p>
<h2 id="实验二-8位同步二进制计数器模块"><a href="#实验二-8位同步二进制计数器模块" class="headerlink" title="实验二    8位同步二进制计数器模块"></a>实验二    8位同步二进制计数器模块</h2><h4 id="【实验内容及原理说明】-1"><a href="#【实验内容及原理说明】-1" class="headerlink" title="【实验内容及原理说明】"></a>【实验内容及原理说明】</h4><p>8位同步二进制计数器，这里的设计参考课本的同步6进制计数器的设计思路；分成加1和减1计数设计。有输入U控制，当输入U=1时，为加1计数器，当输入U=0时，为减1计数器。</p>
<p>状态有28 个状态，画起来非常麻烦且庞大，这里就不在一一展示。基本就是当U=1时：00000000—00000001—00000010—00000011一直往下加，当加到11111111再加1的时候，置0，并且输出一个进位信号C0；当U=0时：11111111—11111110—11111101</p>
<p>真值状态表也不再详细绘制</p>
<h4 id="【实验程序代码】-1"><a href="#【实验程序代码】-1" class="headerlink" title="【实验程序代码】"></a>【实验程序代码】</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> counter2_8bit_synchronous (CP,CLR_,U,Q,CO);</span><br><span class="line">   <span class="keyword">input</span> CP, CLR_,U;  </span><br><span class="line">   <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] Q;     <span class="comment">//Data output</span></span><br><span class="line">   <span class="keyword">output</span> CO;</span><br><span class="line">	<span class="keyword">assign</span> CO = U  &amp; (Q == <span class="number">8&#x27;d127</span>);</span><br><span class="line"> <span class="keyword">always</span> @ (<span class="keyword">posedge</span> CP <span class="keyword">or</span> <span class="keyword">negedge</span> CLR_)</span><br><span class="line">   <span class="keyword">if</span> (~CLR_) Q &lt;= <span class="number">8&#x27;b00000000</span>; <span class="comment">//asynchronous clear</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (U==<span class="number">1</span>)          <span class="comment">//U=1,Up Counter</span></span><br><span class="line">         Q &lt;= Q + <span class="number">1&#x27;b1</span>; </span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (Q == <span class="number">8&#x27;b00000000</span>)</span><br><span class="line">         Q &lt;= <span class="number">8&#x27;d127</span>; </span><br><span class="line">   <span class="keyword">else</span>                    <span class="comment">//U=0,Down Counter</span></span><br><span class="line">         Q &lt;= Q - <span class="number">1&#x27;b1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="【testbench激励代码】-1"><a href="#【testbench激励代码】-1" class="headerlink" title="【testbench激励代码】"></a>【testbench激励代码】</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> test_counter2_8bit_synchronous ;</span><br><span class="line">    <span class="keyword">reg</span>  U;           <span class="comment">//Up/Down inputs      </span></span><br><span class="line">    <span class="keyword">reg</span>  CLK, CLR_;   <span class="comment">//Clock and Reset</span></span><br><span class="line">    <span class="keyword">wire</span>  CO;      <span class="comment">//output  </span></span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>]  Q;    <span class="comment">//Register output</span></span><br><span class="line"></span><br><span class="line">counter2_8bit_synchronous U0(CLK,CLR_,U,Q,CO); <span class="comment">//实例引用设计块</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span>         <span class="comment">// CLR_</span></span><br><span class="line">    CLR_ = <span class="number">1&#x27;b0</span>;</span><br><span class="line">    CLR_ = #<span class="number">10</span> <span class="number">1&#x27;b1</span>;</span><br><span class="line">    #<span class="number">3600</span> <span class="built_in">$stop</span>;</span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">always</span> <span class="keyword">begin</span>    <span class="comment">// CLK</span></span><br><span class="line">    CLK = <span class="number">1&#x27;b0</span>;</span><br><span class="line">    CLK = #<span class="number">10</span> <span class="number">1&#x27;b1</span>;</span><br><span class="line">    #<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span>   <span class="comment">//U</span></span><br><span class="line">    U = <span class="number">1&#x27;b0</span>;</span><br><span class="line">    #<span class="number">2000</span>;</span><br><span class="line">    U = <span class="number">1&#x27;b1</span>;</span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="【仿真波形图】-1"><a href="#【仿真波形图】-1" class="headerlink" title="【仿真波形图】"></a>【仿真波形图】</h4><p>Modelsim仿真波形图如下：</p>
<p><img src="https://s2.loli.net/2022/04/25/5DUACtoTivsuNxJ.png" alt="2simulation.png"></p>
<p>在testbench中，规定2000ns的时候改为加1计数器。</p>
<h4 id="【门级电路图】-1"><a href="#【门级电路图】-1" class="headerlink" title="【门级电路图】"></a>【门级电路图】</h4><h2 id="实验三-十进制计数器模块"><a href="#实验三-十进制计数器模块" class="headerlink" title="实验三    十进制计数器模块"></a>实验三    十进制计数器模块</h2><h4 id="【实验内容及原理说明】-2"><a href="#【实验内容及原理说明】-2" class="headerlink" title="【实验内容及原理说明】"></a>【实验内容及原理说明】</h4><p>由于同步计数器在实际应用中更为广泛，且重点学习的也是同步计数器，因此这里选择设计十进制同步计数器</p>
<p>状态转换图：</p>
<p><img src="https://s2.loli.net/2022/04/25/eQmdh5kJZlvAKFj.png" alt="3status.png"></p>
<p>  真值表：</p>
<p><img src="https://s2.loli.net/2022/04/25/LSDZRyu7cdet4GW.png" alt="3value.png"></p>
<h4 id="【实验程序代码】-2"><a href="#【实验程序代码】-2" class="headerlink" title="【实验程序代码】"></a>【实验程序代码】</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> counter10 (CP,CLR_,U,Q,CO,BO);</span><br><span class="line">   <span class="keyword">input</span> CP, CLR_, U;  </span><br><span class="line">   <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] Q;     <span class="comment">//Data output</span></span><br><span class="line">   <span class="keyword">output</span> CO,BO;</span><br><span class="line"> <span class="keyword">assign</span> CO = U  &amp; (Q == <span class="number">4&#x27;d9</span>);</span><br><span class="line"> <span class="keyword">assign</span>  BO = ~U &amp; (Q == <span class="number">4&#x27;d0</span>) &amp; (CLR_== <span class="number">1&#x27;b1</span>);</span><br><span class="line"> <span class="keyword">always</span> @ (<span class="keyword">posedge</span> CP <span class="keyword">or</span> <span class="keyword">negedge</span> CLR_)</span><br><span class="line">   <span class="keyword">if</span> (~CLR_) Q &lt;= <span class="number">4&#x27;b0000</span>; <span class="comment">//asynchronous clear</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (U==<span class="number">1</span>)          <span class="comment">//U=1,Up Counter</span></span><br><span class="line">         Q &lt;= (Q + <span class="number">1&#x27;b1</span>)%<span class="number">10</span>; </span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (Q == <span class="number">4&#x27;b0000</span>)</span><br><span class="line">         Q &lt;= <span class="number">4&#x27;d9</span>; </span><br><span class="line">   <span class="keyword">else</span>                    <span class="comment">//U=0,Down Counter</span></span><br><span class="line">         Q &lt;= (Q - <span class="number">1&#x27;b1</span>)%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="【testbench激励代码】-2"><a href="#【testbench激励代码】-2" class="headerlink" title="【testbench激励代码】"></a>【testbench激励代码】</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> test_counter10 ;</span><br><span class="line">    <span class="keyword">reg</span>  U;           <span class="comment">//Up/Down inputs      </span></span><br><span class="line">    <span class="keyword">reg</span>  CLK, CLR_;   <span class="comment">//Clock and Reset</span></span><br><span class="line">    <span class="keyword">wire</span>  CO,BO;      <span class="comment">//output  </span></span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">3</span>:<span class="number">0</span>]  Q;    <span class="comment">//Register output</span></span><br><span class="line"></span><br><span class="line">counter10 U0(CLK,CLR_,U,Q,CO,BO); <span class="comment">//实例引用设计块</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span>         <span class="comment">// CLR_</span></span><br><span class="line">    CLR_ = <span class="number">1&#x27;b0</span>;</span><br><span class="line">    CLR_ = #<span class="number">10</span> <span class="number">1&#x27;b1</span>;</span><br><span class="line">    #<span class="number">360</span> <span class="built_in">$stop</span>;</span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">always</span> <span class="keyword">begin</span>    <span class="comment">// CLK</span></span><br><span class="line">    CLK = <span class="number">1&#x27;b0</span>;</span><br><span class="line">    CLK = #<span class="number">10</span> <span class="number">1&#x27;b1</span>;</span><br><span class="line">    #<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span>   <span class="comment">//U</span></span><br><span class="line">    U = <span class="number">1&#x27;b0</span>;</span><br><span class="line">    #<span class="number">190</span>;</span><br><span class="line">    U = <span class="number">1&#x27;b1</span>;</span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="【仿真波形图】-2"><a href="#【仿真波形图】-2" class="headerlink" title="【仿真波形图】"></a>【仿真波形图】</h4><p>Modelsim仿真波形图如下：</p>
<p><img src="https://s2.loli.net/2022/04/25/Y65cNeC71wMqy38.png" alt="3simulation.png"></p>
<p>在190ns的时候更改U的值，U从0变为1，计数器也有减1计数器变为加1计数器。</p>
<h4 id="【门级电路图】-2"><a href="#【门级电路图】-2" class="headerlink" title="【门级电路图】"></a>【门级电路图】</h4><p>使用quartus生成的RTL视图：</p>
<p><img src="https://s2.loli.net/2022/04/25/CWdUpEsyg8kqv6O.png" alt="3RTL.png"></p>
<h2 id="实验四-m序列码产生器模块"><a href="#实验四-m序列码产生器模块" class="headerlink" title="实验四    m序列码产生器模块"></a>实验四    m序列码产生器模块</h2><h4 id="【实验内容及原理说明】-3"><a href="#【实验内容及原理说明】-3" class="headerlink" title="【实验内容及原理说明】"></a>【实验内容及原理说明】</h4><p>要求：设计一个m序列码产生器模块（要求：码长为31，寄存器级数5，反馈系数为75（八进制）的m序列产生器）。</p>
<p>m 序列又叫做伪随机序列、伪噪声(pseudo noise，PN)码或伪随机码，是一种可以预先确定并可以重复地产生和复制、又具有随机统计特性的二进制码序列。伪随机序列一般用二进制表示，每个码元（即构成m序列的元素）只有“0”或“1”两种取值，分别与数字电路中的低电平或高电平相对应。m 序列是对最长线性反馈移位寄存器序列的简称，它是一种由带线性反馈的移位寄存器所产生的序列，并且具有最长周期。</p>
<p>从下图中读出相关参数。</p>
<p><img src="https://s2.loli.net/2022/04/25/7OsY2PUKHLJmyjv.png" alt="4can.png"></p>
<p>根据多项式的系数可以产生m序列。码长为31的m序列，寄存器的级数r = 5，反馈系数为75，75为八进制数，写成二进制数为111101，这就是特征多项式的系数，即</p>
<p>C5 C4 C3 C2 C1 C0=111101</p>
<p>表明C5、C4、C3、C2、C0三条反馈支路是连通的，C1是断开的。</p>
<p><img src="https://s2.loli.net/2022/04/25/Al9iOotV1mCdv7k.png" alt="4status.png"></p>
<h4 id="【实验程序代码】-3"><a href="#【实验程序代码】-3" class="headerlink" title="【实验程序代码】"></a>【实验程序代码】</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> m5(CLK, CLRN, OUT);</span><br><span class="line">    <span class="keyword">input</span> CLK, CLRN;   <span class="comment">//输入端口</span></span><br><span class="line">    <span class="keyword">output</span> OUT;        <span class="comment">//输出端口</span></span><br><span class="line">    <span class="keyword">reg</span>[<span class="number">4</span>:<span class="number">0</span>] Q;        <span class="comment">//中间节点</span></span><br><span class="line">    <span class="keyword">wire</span> C0;</span><br><span class="line"><span class="keyword">assign</span> C0 = ~(Q[<span class="number">4</span>] ^ Q[<span class="number">3</span>]^ Q[<span class="number">2</span>]^ Q[<span class="number">1</span>]);  <span class="comment">//反馈</span></span><br><span class="line"><span class="keyword">assign</span> OUT = Q[<span class="number">4</span>];           <span class="comment">//输出信号</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> CLK <span class="keyword">or</span> <span class="keyword">negedge</span> CLRN)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!CLRN )</span><br><span class="line">         Q[<span class="number">4</span>:<span class="number">0</span>] &lt;= <span class="number">5&#x27;b00000</span>;    <span class="comment">//异步清零</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">         Q[<span class="number">4</span>:<span class="number">0</span>] &lt;= &#123;Q[<span class="number">3</span>:<span class="number">0</span>],C0&#125;; <span class="comment">//移位</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="【testbench激励代码】-3"><a href="#【testbench激励代码】-3" class="headerlink" title="【testbench激励代码】"></a>【testbench激励代码】</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1 ns/ 1 ns</span></span><br><span class="line"><span class="keyword">module</span> test_m5();</span><br><span class="line"><span class="keyword">reg</span> CLK, CLRN;   <span class="keyword">wire</span> OUT;</span><br><span class="line"><span class="comment">//调用(例化)设计块</span></span><br><span class="line">m5 U0(<span class="variable">.CLK</span>(CLK), <span class="variable">.CLRN</span>(CLRN), <span class="variable">.OUT</span>(OUT));</span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span>    <span class="comment">//产生复位信号CLRN</span></span><br><span class="line">        CLRN = <span class="number">1&#x27;b0</span>;</span><br><span class="line">        CLRN = #<span class="number">500</span> <span class="number">1&#x27;b1</span>;</span><br><span class="line">#<span class="number">500</span> <span class="built_in">$stop</span>;</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="keyword">always</span> <span class="keyword">begin</span>      <span class="comment">//产生时钟信号CLK</span></span><br><span class="line">        CLK = <span class="number">1&#x27;b0</span>;</span><br><span class="line">        CLK = #<span class="number">5</span> <span class="number">1&#x27;b1</span>;</span><br><span class="line">        #<span class="number">5</span>;</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="【仿真波形图】-3"><a href="#【仿真波形图】-3" class="headerlink" title="【仿真波形图】"></a>【仿真波形图】</h4><p>Modelsim仿真波形图如下：</p>
<p><img src="https://s2.loli.net/2022/04/25/gO5LI6Cd7qtoFSa.png" alt="4simulation.png"></p>
<p>可以看出来，只有在CLRN信号高电平的时候才有输出，输出的值随着时钟信号的改变发生改变；时钟信号的周期为10ns，于是输出310ns就开始完全重复，码长为31。</p>
<h4 id="【门级电路图】-3"><a href="#【门级电路图】-3" class="headerlink" title="【门级电路图】"></a>【门级电路图】</h4><p>使用quartus生成的RTL视图：</p>
<p><img src="https://s2.loli.net/2022/04/25/wZRpvrClIc5b79X.png" alt="4RTL.png"></p>
<h1 id="实验结果分析及思考"><a href="#实验结果分析及思考" class="headerlink" title="实验结果分析及思考"></a>实验结果分析及思考</h1><ol>
<li>计数器运行时，依次遍历规定的各状态后完成一次循环，它所经过的状态总数称为计数器的“模”（Modulo），通常用M表示。</li>
<li>略</li>
</ol>
]]></content>
      <tags>
        <tag>FPGA实验</tag>
      </tags>
  </entry>
  <entry>
    <title>山东大学FPGA实验4 有限状态机设计</title>
    <url>/2022/04/25/%E5%B1%B1%E4%B8%9C%E5%A4%A7%E5%AD%A6FPGA%E5%AE%9E%E9%AA%8C4-%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="实验报告要求"><a href="#实验报告要求" class="headerlink" title="实验报告要求"></a>实验报告要求</h2><ol>
<li><p>实验内容与详细说明（包括框图、逻辑表达式和真值表）；</p>
</li>
<li><p>分别用<strong>格雷码</strong>和<strong>one-hot码</strong>进行编码，进行综合时，在QuartusII的器件库中选择一款器件，报告中要说明所用器件的型号；综合后要说明设计模块所占用该型器件的资源等；</p>
</li>
<li><p>实验模块程序代码（设计模块Design Block）和激励代码（激励模块Test Bench）；</p>
</li>
<li><p>仿真波形图；</p>
</li>
<li><p>综合得到的门级电路图，所用器件的型号以及设计模块所占用该型器件的资源情况；</p>
</li>
<li><p>实验结果分析及思考。</p>
</li>
</ol>
<h2 id="实验一-交通红绿灯控制模块"><a href="#实验一-交通红绿灯控制模块" class="headerlink" title="实验一    交通红绿灯控制模块"></a>实验一    交通红绿灯控制模块</h2><h4 id="【实验内容及原理说明】"><a href="#【实验内容及原理说明】" class="headerlink" title="【实验内容及原理说明】"></a>【实验内容及原理说明】</h4><p>设计一个交通红绿灯控制器模块，实现主干道和支路之间红绿黄灯的信号转换。</p>
<p>以课本设计为例进行分析和介绍</p>
<p><img src="https://s2.loli.net/2022/04/25/sJNqnvprlZW3KzL.jpg" alt="1.1.jpg"></p>
<p>设计要求：</p>
<p>（1）一般情况下，保持主干道畅通，主干道绿灯亮、支干道红灯亮，并且主干道绿灯亮的时间不得少于60秒。</p>
<p>（2）主干道车辆通行时间已经达到60秒，则主干道红灯亮、支干道绿灯亮，但支干道绿灯亮的时间不得超过30秒。</p>
<p>（3）每次主干道或支干道绿灯变红灯时，黄灯先亮5秒钟。</p>
<p>框图：</p>
<p><img src="https://s2.loli.net/2022/04/25/BkL3cZhQvuKUTeR.png" alt="1.frame.png"></p>
<p>这里我们去除传感器S </p>
<p>设计分析：</p>
<p>交通灯控制单元的控制过程分为四个阶段，对应的输出有四种状态，分别用S0, S1, S2和S3表示：</p>
<p>S0状态：主干道绿灯亮支干道红灯亮，主干道绿灯已亮足规定的时间间隔TL(60s)，控制器发出状态转换信号ST，控制器从状态S0转换到S1。</p>
<p>S1状态：主干道黄灯亮，支干道红灯亮，进入此状态，黄灯亮足规定的时间间隔TY(5s)时，控制器发出状态转换信号ST，控制器从状态S1转换到S2。</p>
<p>S2状态：支干道绿灯亮，主干道红灯亮，支干道绿灯亮的时间不得超过TS(30s)时间间隔，否则控制单元发出状态转换信号ST，控制器转换到S3状态。</p>
<p>S3状态：支干道黄灯亮，主干道红灯亮，此时状态与S1状态持续的时间间隔相同，均为TY(5s) ，时间到时，控制器发出ST信号，控制器从状态S3回到S0状态。</p>
<h3 id="格雷码编码"><a href="#格雷码编码" class="headerlink" title="格雷码编码"></a>格雷码编码</h3><p>对上述S0、S1、S2和S3四种状态按照格雷码进行状态编码，分别为00，01，11和10，由此得到交通灯控制单元的ASM图和状态图。</p>
<p>交通灯控制器各功能模块电路的框架设计：</p>
<p>通过分析交通灯控制电路的要求可知，系统主要由时钟脉冲产生器(CLK )、定时器(TL, TS, TY)、控制器及译码器构成</p>
<p>①设计控制器</p>
<p> 根据交通灯控制单元的ASM图，ASM图中的状态框与状态图中的状态相对应，判断框中的条件是状态转换的输入条件，条件输出框与控制单元状态转换的输出相对应。状态图是描述状态之间的转换。</p>
<p>②设计定时器</p>
<p>定时器由与系统秒脉冲同步的计数器构成，时钟脉冲上升沿到来时，在控制信号ST作用下，计数器从零开始计数，并向控制器提供模M5、M30和M60信号，即TY、TS和TL定时时间信号。</p>
<p>③设计译码器</p>
<p>当交通灯控制电路处于不同工作状态时，交通信号灯按一定的规律与之对应。</p>
<h4 id="【实验程序代码】"><a href="#【实验程序代码】" class="headerlink" title="【实验程序代码】"></a>【实验程序代码】</h4><p>将课本中的习题代码进行了优化，一方面去除了传感器S，另一方面将宏定义的define改成了parameter定义的方式对状态变量进行了定义，这是比较常用的方式。</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">//--------------- crossingcon.v ---------------</span></span><br><span class="line"><span class="comment">// Traffic Signal Controller</span></span><br><span class="line"><span class="comment">//State definition     HighWay   Country</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> crossingcon (CLK, nRESET, HG, HY, HR, FG, FY, FR, TimerH, TimerL);</span><br><span class="line"><span class="comment">//I/O ports</span></span><br><span class="line"><span class="keyword">input</span> CLK, nRESET;  </span><br><span class="line"><span class="keyword">output</span> HG, HY, HR, FG, FY, FR; </span><br><span class="line"><span class="comment">//declared output signals are registers</span></span><br><span class="line"><span class="keyword">reg</span>    HG, HY, HR, FG, FY, FR;</span><br><span class="line"><span class="keyword">output</span> [<span class="number">3</span>:<span class="number">0</span>] TimerH;</span><br><span class="line"><span class="keyword">output</span> [<span class="number">3</span>:<span class="number">0</span>] TimerL;</span><br><span class="line"><span class="keyword">reg</span>    [<span class="number">3</span>:<span class="number">0</span>] TimerH, TimerL;</span><br><span class="line"><span class="comment">//Internal state variables</span></span><br><span class="line"><span class="keyword">wire</span> Tl, Ts, Ty; <span class="comment">//timer output signals</span></span><br><span class="line"><span class="keyword">reg</span> St;           <span class="comment">//state translate signal</span></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">1</span>:<span class="number">0</span>] CurrentState, NextState;    <span class="comment">//FSM state register</span></span><br><span class="line"><span class="keyword">parameter</span> [<span class="number">1</span>:<span class="number">0</span>] S0=<span class="number">2&#x27;b00</span>;  <span class="comment">//GREEN	     RED</span></span><br><span class="line"><span class="keyword">parameter</span> [<span class="number">1</span>:<span class="number">0</span>] S1=<span class="number">2&#x27;b01</span>;<span class="comment">//YELLOW RED</span></span><br><span class="line"><span class="keyword">parameter</span> [<span class="number">1</span>:<span class="number">0</span>] S2=<span class="number">2&#x27;b11</span> ; <span class="comment">//RED	    GREEN</span></span><br><span class="line"><span class="keyword">parameter</span> [<span class="number">1</span>:<span class="number">0</span>] S3=<span class="number">2&#x27;b10</span>  ;<span class="comment">//RED	    YELLOW</span></span><br><span class="line"><span class="comment">/*===== Description of the timer block =====*/</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> CLK <span class="keyword">or</span> <span class="keyword">negedge</span> nRESET )</span><br><span class="line"><span class="keyword">begin</span>:  counter</span><br><span class="line">    <span class="keyword">if</span> (~nRESET)  &#123;TimerH, TimerL&#125; &lt;= <span class="number">8&#x27;h00</span>; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (St)         &#123;TimerH, TimerL&#125; &lt;= <span class="number">8&#x27;h00</span>; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((TimerH == <span class="number">5</span>) &amp; (TimerL == <span class="number">9</span>)) </span><br><span class="line">        <span class="keyword">begin</span> &#123;TimerH, TimerL&#125; &lt;= &#123;TimerH, TimerL&#125;; <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (TimerL == <span class="number">9</span>) </span><br><span class="line">        <span class="keyword">begin</span> TimerH &lt;= TimerH + <span class="number">1</span>;  TimerL &lt;= <span class="number">0</span>; <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">begin</span> TimerH &lt;= TimerH; TimerL &lt;= TimerL + <span class="number">1</span>; <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span>  <span class="comment">// BCD counter</span></span><br><span class="line"><span class="keyword">assign</span>  Ty = (TimerH==<span class="number">0</span>)&amp;(TimerL==<span class="number">4</span>);</span><br><span class="line"><span class="keyword">assign</span>  Ts = (TimerH==<span class="number">2</span>)&amp;(TimerL==<span class="number">9</span>);</span><br><span class="line"><span class="keyword">assign</span>  Tl = (TimerH==<span class="number">5</span>)&amp;(TimerL==<span class="number">9</span>);</span><br><span class="line"><span class="comment">/*===== Description of the signal controller block =====*/</span></span><br><span class="line"><span class="comment">//FSM register:State change only at positive edge of clock</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> CLK <span class="keyword">or</span> <span class="keyword">negedge</span> nRESET )</span><br><span class="line">    <span class="keyword">begin</span>:  statereg</span><br><span class="line">	<span class="keyword">if</span> (~nRESET)    <span class="comment">//Signal controller starts in S0 state</span></span><br><span class="line">	 	CurrentState  &lt;=  S0;</span><br><span class="line">	<span class="keyword">else</span>      CurrentState  &lt;=  NextState;</span><br><span class="line">     <span class="keyword">end</span>   <span class="comment">//statereg</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// FSM combinational block: state machine using case statements</span></span><br><span class="line"><span class="keyword">always</span> @(CurrentState <span class="keyword">or</span> Tl <span class="keyword">or</span> Ts <span class="keyword">or</span> Ty )</span><br><span class="line">   <span class="keyword">begin</span>: fsm</span><br><span class="line">	  <span class="keyword">case</span>(CurrentState)</span><br><span class="line">	  	S0: <span class="keyword">begin</span>      <span class="comment">//</span></span><br><span class="line">				NextState = (Tl) ? S1 :S0;</span><br><span class="line">				St = (Tl) ? <span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">			  <span class="keyword">end</span></span><br><span class="line">	  	S1:       <span class="keyword">begin</span></span><br><span class="line">				NextState = (Ty) ? S2 :S1;</span><br><span class="line">				St = (Ty) ? <span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">			  <span class="keyword">end</span></span><br><span class="line">	  	S2:       <span class="keyword">begin</span></span><br><span class="line">				NextState = (Ts) ? S3 :S2;</span><br><span class="line">				St = (Ts) ? <span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">			  <span class="keyword">end</span></span><br><span class="line">	  	S3:       <span class="keyword">begin</span></span><br><span class="line">				NextState = (Ty) ? S0 :S3;</span><br><span class="line">				St = (Ty) ? <span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">			</span><br><span class="line">                                  <span class="keyword">end</span></span><br><span class="line">	 <span class="keyword">endcase</span>	</span><br><span class="line"><span class="keyword">end</span>  <span class="comment">//fsm</span></span><br><span class="line"><span class="comment">/*===== Description of the decoder block =====*/</span></span><br><span class="line"><span class="comment">//Compute values of main signal and country signal</span></span><br><span class="line"><span class="keyword">always</span> @(CurrentState)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">case</span> (CurrentState)</span><br><span class="line">	S0: <span class="keyword">begin</span></span><br><span class="line">	          &#123;HG, HY, HR&#125; = <span class="number">3&#x27;b100</span>; <span class="comment">//Highway signal is green</span></span><br><span class="line">	          &#123;FG, FY, FR&#125;   = <span class="number">3&#x27;b001</span>; <span class="comment">//Country signal is red </span></span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">    S1: <span class="keyword">begin</span></span><br><span class="line">	          &#123;HG, HY, HR&#125; = <span class="number">3&#x27;b010</span>; <span class="comment">//Highway signal is yellow</span></span><br><span class="line"></span><br><span class="line">                      &#123;FG, FY, FR&#125;  = <span class="number">3&#x27;b001</span>;    <span class="comment">//Country signal is red</span></span><br><span class="line">	         <span class="keyword">end</span></span><br><span class="line">	 S2: <span class="keyword">begin</span></span><br><span class="line">	           &#123;HG, HY, HR&#125; = <span class="number">3&#x27;b001</span>;   <span class="comment">//Highway signal is red</span></span><br><span class="line">	           &#123;FG, FY, FR&#125;   = <span class="number">3&#x27;b100</span>;   <span class="comment">//Country signal is green</span></span><br><span class="line">	         <span class="keyword">end</span></span><br><span class="line">	 S3: <span class="keyword">begin</span></span><br><span class="line">	          &#123;HG, HY, HR&#125; = <span class="number">3&#x27;b001</span>;   <span class="comment">//Highway signal is red</span></span><br><span class="line">	          &#123;FG, FY, FR&#125;   = <span class="number">3&#x27;b010</span>;   <span class="comment">//Country signal is yellow</span></span><br><span class="line">	         <span class="keyword">end</span></span><br><span class="line">           <span class="keyword">endcase</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="【testbench激励代码】"><a href="#【testbench激励代码】" class="headerlink" title="【testbench激励代码】"></a>【testbench激励代码】</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> test_crossingcon (); </span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span>        CLK, nRESET;</span><br><span class="line"><span class="keyword">wire</span> HG, HY, HR, FG, FY, FR;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">3</span>:<span class="number">0</span>] TimerH,  TimerL;</span><br><span class="line"></span><br><span class="line">crossingcon i1 (<span class="variable">.CLK</span>(CLK), <span class="variable">.nRESET</span>(nRESET), <span class="variable">.HG</span>(HG), </span><br><span class="line">			<span class="variable">.HY</span>(HY), <span class="variable">.HR</span>(HR), <span class="variable">.FG</span>(FG), <span class="variable">.FY</span>(FY), </span><br><span class="line">			<span class="variable">.FR</span>(FR), <span class="variable">.TimerH</span>(TimerH), <span class="variable">.TimerL</span>(TimerL)); </span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span>     <span class="comment">// nRESET</span></span><br><span class="line">  nRESET = <span class="number">1&#x27;b0</span>;</span><br><span class="line">  nRESET = #<span class="number">20</span> <span class="number">1&#x27;b1</span>;</span><br><span class="line">#<span class="number">2000</span> <span class="built_in">$stop</span>;</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="keyword">always</span> <span class="keyword">begin</span>      <span class="comment">// CLK</span></span><br><span class="line">CLK = <span class="number">1&#x27;b0</span>;</span><br><span class="line">CLK = #<span class="number">10</span> <span class="number">1&#x27;b1</span>;</span><br><span class="line">#<span class="number">10</span>;</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="【仿真波形图】"><a href="#【仿真波形图】" class="headerlink" title="【仿真波形图】"></a>【仿真波形图】</h4><p>Modelsim仿真波形图如下图：</p>
<p><img src="https://s2.loli.net/2022/04/25/6oHylI1BQpzhxev.png" alt="1.1simulation.png"></p>
<h4 id="【门级电路图】"><a href="#【门级电路图】" class="headerlink" title="【门级电路图】"></a>【门级电路图】</h4><p>使用quartus生成的RTL视图：</p>
<p><img src="https://s2.loli.net/2022/04/25/EfsC1kNwYS9vQW5.png" alt="1.1RTL.png"></p>
<h4 id="【资源占用情况】"><a href="#【资源占用情况】" class="headerlink" title="【资源占用情况】"></a>【资源占用情况】</h4><p>选择的芯片型号为 Cyclone IV GX；综合后资源占用情况如下图所示：</p>
<p>其中Total logic elements占比不到1％，寄存器占用12个，pin口占用16/81个，可以看出，该系统占用芯片的资源的一小部分。</p>
<p><img src="https://s2.loli.net/2022/04/25/tc72hfATadUn1ZB.png" alt="1.1source.png"></p>
<h3 id="one-hot码编码"><a href="#one-hot码编码" class="headerlink" title="one-hot码编码"></a>one-hot码编码</h3><h4 id="【实验程序代码】-1"><a href="#【实验程序代码】-1" class="headerlink" title="【实验程序代码】"></a>【实验程序代码】</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">//--------------- crossingcon.v ---------------</span></span><br><span class="line"><span class="comment">// Traffic Signal Controller</span></span><br><span class="line"><span class="comment">//State definition     HighWay   Country</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> crossingcon_onehot (CLK, nRESET, HG, HY, HR, FG, FY, FR, TimerH, TimerL);</span><br><span class="line"><span class="comment">//I/O ports</span></span><br><span class="line"><span class="keyword">input</span> CLK, nRESET;  </span><br><span class="line"><span class="keyword">output</span> HG, HY, HR, FG, FY, FR; </span><br><span class="line"><span class="comment">//declared output signals are registers</span></span><br><span class="line"><span class="keyword">reg</span>    HG, HY, HR, FG, FY, FR;</span><br><span class="line"><span class="keyword">output</span> [<span class="number">3</span>:<span class="number">0</span>] TimerH;</span><br><span class="line"><span class="keyword">output</span> [<span class="number">3</span>:<span class="number">0</span>] TimerL;</span><br><span class="line"><span class="keyword">reg</span>    [<span class="number">3</span>:<span class="number">0</span>] TimerH, TimerL;</span><br><span class="line"><span class="comment">//Internal state variables</span></span><br><span class="line"><span class="keyword">wire</span> Tl, Ts, Ty; <span class="comment">//timer output signals</span></span><br><span class="line"><span class="keyword">reg</span> St;           <span class="comment">//state translate signal</span></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] CurrentState, NextState;    <span class="comment">//FSM state register</span></span><br><span class="line"><span class="keyword">parameter</span> [<span class="number">1</span>:<span class="number">0</span>] S0=<span class="number">4&#x27;b0001</span>;  <span class="comment">//GREEN	     RED</span></span><br><span class="line"><span class="keyword">parameter</span> [<span class="number">1</span>:<span class="number">0</span>] S1=<span class="number">4&#x27;b0010</span>;<span class="comment">//YELLOW RED</span></span><br><span class="line"><span class="keyword">parameter</span> [<span class="number">1</span>:<span class="number">0</span>] S2=<span class="number">4&#x27;b0100</span> ; <span class="comment">//RED	    GREEN</span></span><br><span class="line"><span class="keyword">parameter</span> [<span class="number">1</span>:<span class="number">0</span>] S3=<span class="number">4&#x27;b1000</span>  ;<span class="comment">//RED	    YELLOW</span></span><br><span class="line"><span class="comment">/*===== Description of the timer block =====*/</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> CLK <span class="keyword">or</span> <span class="keyword">negedge</span> nRESET )</span><br><span class="line"><span class="keyword">begin</span>:  counter</span><br><span class="line">    <span class="keyword">if</span> (~nRESET)  &#123;TimerH, TimerL&#125; &lt;= <span class="number">8&#x27;h00</span>; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (St)         &#123;TimerH, TimerL&#125; &lt;= <span class="number">8&#x27;h00</span>; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((TimerH == <span class="number">5</span>) &amp; (TimerL == <span class="number">9</span>)) </span><br><span class="line">        <span class="keyword">begin</span> &#123;TimerH, TimerL&#125; &lt;= &#123;TimerH, TimerL&#125;; <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (TimerL == <span class="number">9</span>) </span><br><span class="line">        <span class="keyword">begin</span> TimerH &lt;= TimerH + <span class="number">1</span>;  TimerL &lt;= <span class="number">0</span>; <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">begin</span> TimerH &lt;= TimerH; TimerL &lt;= TimerL + <span class="number">1</span>; <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span>  <span class="comment">// BCD counter</span></span><br><span class="line"><span class="keyword">assign</span>  Ty = (TimerH==<span class="number">0</span>)&amp;(TimerL==<span class="number">4</span>);</span><br><span class="line"><span class="keyword">assign</span>  Ts = (TimerH==<span class="number">2</span>)&amp;(TimerL==<span class="number">9</span>);</span><br><span class="line"><span class="keyword">assign</span>  Tl = (TimerH==<span class="number">5</span>)&amp;(TimerL==<span class="number">9</span>);</span><br><span class="line"><span class="comment">/*===== Description of the signal controller block =====*/</span></span><br><span class="line"><span class="comment">//FSM register:State change only at positive edge of clock</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> CLK <span class="keyword">or</span> <span class="keyword">negedge</span> nRESET )</span><br><span class="line">    <span class="keyword">begin</span>:  statereg</span><br><span class="line">	<span class="keyword">if</span> (~nRESET)    <span class="comment">//Signal controller starts in S0 state</span></span><br><span class="line">	 	CurrentState  &lt;=  S0;</span><br><span class="line">	<span class="keyword">else</span>      CurrentState  &lt;=  NextState;</span><br><span class="line">     <span class="keyword">end</span>   <span class="comment">//statereg</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// FSM combinational block: state machine using case statements</span></span><br><span class="line"><span class="keyword">always</span> @(CurrentState <span class="keyword">or</span> Tl <span class="keyword">or</span> Ts <span class="keyword">or</span> Ty )</span><br><span class="line">   <span class="keyword">begin</span>: fsm</span><br><span class="line">	  <span class="keyword">case</span>(CurrentState)</span><br><span class="line">	  	S0: <span class="keyword">begin</span>      <span class="comment">//</span></span><br><span class="line">				NextState = (Tl) ? S1 :S0;</span><br><span class="line">				St = (Tl) ? <span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">			  <span class="keyword">end</span></span><br><span class="line">	  	S1:       <span class="keyword">begin</span></span><br><span class="line">				NextState = (Ty) ? S2 :S1;</span><br><span class="line">				St = (Ty) ? <span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">			  <span class="keyword">end</span></span><br><span class="line">	  	S2:       <span class="keyword">begin</span></span><br><span class="line">				NextState = (Ts) ? S3 :S2;</span><br><span class="line">				St = (Ts) ? <span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">			  <span class="keyword">end</span></span><br><span class="line">	  	S3:       <span class="keyword">begin</span></span><br><span class="line">				NextState = (Ty) ? S0 :S3;</span><br><span class="line">				St = (Ty) ? <span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">			</span><br><span class="line">                                  <span class="keyword">end</span></span><br><span class="line">	 <span class="keyword">endcase</span>	</span><br><span class="line"><span class="keyword">end</span>  <span class="comment">//fsm</span></span><br><span class="line"><span class="comment">/*===== Description of the decoder block =====*/</span></span><br><span class="line"><span class="comment">//Compute values of main signal and country signal</span></span><br><span class="line"><span class="keyword">always</span> @(CurrentState)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">case</span> (CurrentState)</span><br><span class="line">	S0: <span class="keyword">begin</span></span><br><span class="line">	          &#123;HG, HY, HR&#125; = <span class="number">3&#x27;b100</span>; <span class="comment">//Highway signal is green</span></span><br><span class="line">	          &#123;FG, FY, FR&#125;   = <span class="number">3&#x27;b001</span>; <span class="comment">//Country signal is red </span></span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">    S1: <span class="keyword">begin</span></span><br><span class="line">	          &#123;HG, HY, HR&#125; = <span class="number">3&#x27;b010</span>; <span class="comment">//Highway signal is yellow</span></span><br><span class="line"></span><br><span class="line">                      &#123;FG, FY, FR&#125;  = <span class="number">3&#x27;b001</span>;    <span class="comment">//Country signal is red</span></span><br><span class="line">	         <span class="keyword">end</span></span><br><span class="line">	 S2: <span class="keyword">begin</span></span><br><span class="line">	           &#123;HG, HY, HR&#125; = <span class="number">3&#x27;b001</span>;   <span class="comment">//Highway signal is red</span></span><br><span class="line">	           &#123;FG, FY, FR&#125;   = <span class="number">3&#x27;b100</span>;   <span class="comment">//Country signal is green</span></span><br><span class="line">	         <span class="keyword">end</span></span><br><span class="line">	 S3: <span class="keyword">begin</span></span><br><span class="line">	          &#123;HG, HY, HR&#125; = <span class="number">3&#x27;b001</span>;   <span class="comment">//Highway signal is red</span></span><br><span class="line">	          &#123;FG, FY, FR&#125;   = <span class="number">3&#x27;b010</span>;   <span class="comment">//Country signal is yellow</span></span><br><span class="line">	         <span class="keyword">end</span></span><br><span class="line">           <span class="keyword">endcase</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="【testbench激励代码】-1"><a href="#【testbench激励代码】-1" class="headerlink" title="【testbench激励代码】"></a>【testbench激励代码】</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> test_crossingcon_onehot (); </span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span>        CLK, nRESET;</span><br><span class="line"><span class="keyword">wire</span> HG, HY, HR, FG, FY, FR;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">3</span>:<span class="number">0</span>] TimerH,  TimerL;</span><br><span class="line"></span><br><span class="line">crossingcon_onehot i1 (<span class="variable">.CLK</span>(CLK), <span class="variable">.nRESET</span>(nRESET), <span class="variable">.HG</span>(HG), </span><br><span class="line">			<span class="variable">.HY</span>(HY), <span class="variable">.HR</span>(HR), <span class="variable">.FG</span>(FG), <span class="variable">.FY</span>(FY), </span><br><span class="line">			<span class="variable">.FR</span>(FR), <span class="variable">.TimerH</span>(TimerH), <span class="variable">.TimerL</span>(TimerL)); </span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span>     <span class="comment">// nRESET</span></span><br><span class="line">  nRESET = <span class="number">1&#x27;b0</span>;</span><br><span class="line">  nRESET = #<span class="number">20</span> <span class="number">1&#x27;b1</span>;</span><br><span class="line">#<span class="number">2000</span> <span class="built_in">$stop</span>;</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="keyword">always</span> <span class="keyword">begin</span>      <span class="comment">// CLK</span></span><br><span class="line">CLK = <span class="number">1&#x27;b0</span>;</span><br><span class="line">CLK = #<span class="number">10</span> <span class="number">1&#x27;b1</span>;</span><br><span class="line">#<span class="number">10</span>;</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<h4 id="【仿真波形图】-1"><a href="#【仿真波形图】-1" class="headerlink" title="【仿真波形图】"></a>【仿真波形图】</h4><p>Modelsim仿真波形图如下图：</p>
<p><img src="https://s2.loli.net/2022/04/25/nzN53fl7rxAeRpG.png" alt="1.2simulation.png"></p>
<h4 id="【门级电路图】-1"><a href="#【门级电路图】-1" class="headerlink" title="【门级电路图】"></a>【门级电路图】</h4><p><img src="https://s2.loli.net/2022/04/25/KtzvuqiRc3rwg5U.png" alt="1.2RTL.png"></p>
<h4 id="【资源占用情况】-1"><a href="#【资源占用情况】-1" class="headerlink" title="【资源占用情况】"></a>【资源占用情况】</h4><p>选择的芯片型号为 Cyclone IV GX；综合后资源占用情况如下图所示：</p>
<p>其中Total logic elements占比不到1％，寄存器占用11个，pin口占用16/81个，可以看出，该系统占用芯片的资源的一小部分。</p>
<p><img src="https://s2.loli.net/2022/04/25/1CAqouaIvPkcVSW.png" alt="1.2resource.png"></p>
<h2 id="小轿车尾灯控制模块"><a href="#小轿车尾灯控制模块" class="headerlink" title="小轿车尾灯控制模块"></a>小轿车尾灯控制模块</h2><h4 id="【实验内容及原理说明】-1"><a href="#【实验内容及原理说明】-1" class="headerlink" title="【实验内容及原理说明】"></a>【实验内容及原理说明】</h4><p>设计一个小轿车尾灯控制器模块（以书中的例子）。</p>
<p>汽车尾灯发出的信号主要是给后面行驶汽车的司机看的，通常汽车驾驶室有刹车开关（HAZ）、左转弯开关(LEFT)和右转弯开关(RIGHT)，司机通过操作这3个开关给出车辆的行驶状态。假设在汽车尾部左、右两侧各有3个指示灯，分别用LA、LB、LC、RA、RB、RC表示。这些灯的亮、灭规律如下：</p>
<p>（1）汽车正常行驶时，尾部两侧的6个灯全部熄灭。</p>
<p>（2）刹车时，汽车尾灯工作在告警状态，所有6个灯按一定频率闪烁（或一直保持常亮状态）。</p>
<p>（3）左转弯时，左侧3个灯轮流顺序点亮（或按一定频率闪烁），其规律如图所示，右侧灯全灭。</p>
<p>（4）右转弯时，右侧3个灯轮流顺序点亮（或按一定频率闪烁），其规律如图所示，左侧灯全灭。</p>
<p>假设电路的输入时钟信号为CP，CP的频率对于汽车尾灯所要求的闪烁频率。</p>
<p><img src="https://s2.loli.net/2022/04/25/8VLYn9dh3CzTHiy.png" alt="2.light.png"></p>
<p>（1）画出原始状态图。选择Moore机设计该电路，则尾灯的亮、灭直接由状态译码就可以得到。由设计要求可知：汽车左转弯时，右边的灯不亮而左边的灯依次循环点亮，即0个、1个、2个或3个灯亮，分别用L0、L1、L2、L3表示，状态机在4个状态中循环。同理，汽车右转弯时，状态机也会在4个状态中循环，即左边灯不亮而右边的灯有0个、1个、2个或3个灯亮，分别用R0、R1、R2、R3表示。由于L0和R0都表示6个灯不亮，所以合起来用IDLE表示。将6个灯都亮的状态用LR3表示。可得原始的状态图就画出来了。</p>
<p><img src="https://s2.loli.net/2022/04/25/t4rhjcwg8q7JSZz.jpg" alt="2.1staue.error.jpg"><img src="https://s2.loli.net/2022/04/25/v5SopWHmIQ4JdMn.jpg" alt="2.1statue.right.jpg"></p>
<p>分析一下，就会发现一个没有考虑到的实际问题，即如果多个输入同时有效，状态机如何工作呢？下图解决了多个输入同时有效的问题，并将LEFT和RIGHT同时有效的情况处理成告警状态。经过改进且具有这一特性的状态图如图所示。</p>
<p><img src="https://s2.loli.net/2022/04/25/hamG2lbLIOiVgrs.jpg" alt="2.1statue.jpg"></p>
<p>（2）列出电路的输出。由于电路的输出信号较多，不便于写在状态图中，所以单独列出输出逻辑真值表</p>
<p><img src="https://s2.loli.net/2022/04/25/dN17rfwhMYPuVme.png" alt="2.1value.png"></p>
<p>（3）选择一种编码方案，对上述状态图进行状态分配，然后用Verilog HDL描述状态图和输出逻辑。</p>
<h3 id="格雷码编码-1"><a href="#格雷码编码-1" class="headerlink" title="格雷码编码"></a>格雷码编码</h3><p>这里选择使用格雷码对状态进行编码，一共8个状态，只需要使用3位格雷码即可。</p>
<h4 id="【实验程序代码】-2"><a href="#【实验程序代码】-2" class="headerlink" title="【实验程序代码】"></a>【实验程序代码】</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> car_lighting_con(CP,RESET,LEFT,RIGHT,HAZ,LC,LB,LA,RA,RB,RC);</span><br><span class="line">	<span class="keyword">input</span> CP,RESET;<span class="comment">//时钟、复位</span></span><br><span class="line">	<span class="keyword">input</span> LEFT,RIGHT,HAZ;<span class="comment">//左右转信号、刹车信号</span></span><br><span class="line">	<span class="keyword">output</span> <span class="keyword">reg</span> LC,LB,LA,RA,RB,RC;<span class="comment">//输出6个灯</span></span><br><span class="line">	<span class="keyword">reg</span>[<span class="number">2</span>:<span class="number">0</span>] currentState,nextState;</span><br><span class="line">	<span class="keyword">parameter</span> IDLE=<span class="number">3&#x27;b000</span>,L1=<span class="number">3&#x27;b001</span>,L2=<span class="number">3&#x27;b011</span>,L3=<span class="number">3&#x27;b010</span>,</span><br><span class="line">					R1=<span class="number">3&#x27;b110</span>,R2=<span class="number">3&#x27;b111</span>,R3=<span class="number">3&#x27;b101</span>,LR=<span class="number">3&#x27;b100</span>;</span><br><span class="line">	<span class="comment">//一般不使用宏定义define，如果使用注意前面的`</span></span><br><span class="line"><span class="comment">//时钟和异步复位信号//</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> CP 	<span class="keyword">or</span> <span class="keyword">negedge</span> RESET)</span><br><span class="line">	<span class="keyword">begin</span> </span><br><span class="line">		<span class="keyword">if</span>(~RESET)</span><br><span class="line">		currentState&lt;=IDLE;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		currentState&lt;=nextState;</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="comment">//逻辑电路部分//</span></span><br><span class="line"><span class="keyword">always</span>@(currentState <span class="keyword">or</span> LEFT <span class="keyword">or</span> RIGHT <span class="keyword">or</span> HAZ)</span><br><span class="line">	<span class="keyword">begin</span> </span><br><span class="line">	<span class="keyword">case</span>(currentState)</span><br><span class="line">	IDLE:<span class="keyword">begin</span></span><br><span class="line">		<span class="keyword">if</span>(~(LEFT||RIGHT||HAZ))</span><br><span class="line">		nextState=IDLE;</span><br><span class="line">		<span class="keyword">if</span>(LEFT&amp;&amp;(~RIGHT)&amp;&amp;(~HAZ))</span><br><span class="line">		nextState=L1;</span><br><span class="line">		<span class="keyword">if</span>(LEFT&amp;&amp;RIGHT||HAZ)</span><br><span class="line">		nextState=LR;</span><br><span class="line">		<span class="keyword">if</span>((~LEFT)&amp;&amp;RIGHT&amp;&amp;(~HAZ))</span><br><span class="line">		nextState=R1;</span><br><span class="line">	<span class="keyword">end</span>	</span><br><span class="line">	L1:</span><br><span class="line">		nextState=(~HAZ)? L2:LR;		</span><br><span class="line">	L2:</span><br><span class="line">		nextState=(~HAZ)? L3:LR;		</span><br><span class="line">	L3:</span><br><span class="line">		nextState=IDLE;</span><br><span class="line">	R1:</span><br><span class="line">		nextState=(~HAZ)? R2:LR;</span><br><span class="line">	R2:</span><br><span class="line">		nextState=(~HAZ)? R3:LR;</span><br><span class="line">	R3:</span><br><span class="line">		nextState=IDLE;</span><br><span class="line">	LR:</span><br><span class="line">		nextState=IDLE;</span><br><span class="line">	<span class="keyword">endcase</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//译码器部分//</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="keyword">always</span>@(currentState)</span><br><span class="line">	<span class="keyword">begin</span></span><br><span class="line">		<span class="keyword">case</span>(currentState)</span><br><span class="line">	IDLE:<span class="keyword">begin</span></span><br><span class="line">	   &#123;LC,LB,LA,RA,RB,RC&#125;=<span class="number">6&#x27;b000000</span>;</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	L1:<span class="keyword">begin</span></span><br><span class="line">		&#123;LC,LB,LA,RA,RB,RC&#125;=<span class="number">6&#x27;b001000</span>;</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	L2:<span class="keyword">begin</span></span><br><span class="line">		&#123;LC,LB,LA,RA,RB,RC&#125;=<span class="number">6&#x27;b010000</span>;</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	L3:<span class="keyword">begin</span></span><br><span class="line">		&#123;LC,LB,LA,RA,RB,RC&#125;=<span class="number">6&#x27;b100000</span>;	</span><br><span class="line">		<span class="keyword">end</span>	</span><br><span class="line">	R1:<span class="keyword">begin</span></span><br><span class="line">		&#123;LC,LB,LA,RA,RB,RC&#125;=<span class="number">6&#x27;b000100</span>;	</span><br><span class="line">		<span class="keyword">end</span>	</span><br><span class="line">	R2:<span class="keyword">begin</span></span><br><span class="line">		&#123;LC,LB,LA,RA,RB,RC&#125;=<span class="number">6&#x27;b000010</span>;		</span><br><span class="line">		<span class="keyword">end</span>	</span><br><span class="line">	R3:<span class="keyword">begin</span></span><br><span class="line">	   &#123;LC,LB,LA,RA,RB,RC&#125;=<span class="number">6&#x27;b000001</span>;	</span><br><span class="line">		<span class="keyword">end</span>	</span><br><span class="line">	LR:<span class="keyword">begin</span></span><br><span class="line">	   &#123;LC,LB,LA,RA,RB,RC&#125;=<span class="number">6&#x27;b111111</span>;	</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">endcase</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="【testbench激励代码】-2"><a href="#【testbench激励代码】-2" class="headerlink" title="【testbench激励代码】"></a>【testbench激励代码】</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> test_car_lighting_con (); </span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span>        CP, RESET;</span><br><span class="line"><span class="keyword">reg</span>   	  LEFT,RIGHT,HAZ;</span><br><span class="line"><span class="keyword">wire</span> 		  LC,LB,LA,RA,RB,RC;</span><br><span class="line">car_lighting_con i1 (<span class="variable">.CP</span>(CP), <span class="variable">.RESET</span>(RESET), <span class="variable">.LEFT</span>(LEFT), </span><br><span class="line">			<span class="variable">.RIGHT</span>(RIGHT), <span class="variable">.HAZ</span>(HAZ), <span class="variable">.LC</span>(LC), <span class="variable">.LB</span>(LB), </span><br><span class="line">			<span class="variable">.LA</span>(LA), <span class="variable">.RA</span>(RA), <span class="variable">.RB</span>(RB), <span class="variable">.RC</span>(RC)); </span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span>     <span class="comment">// RESET</span></span><br><span class="line">	RESET = <span class="number">1&#x27;b0</span>;</span><br><span class="line">	RESET = #<span class="number">20</span> <span class="number">1&#x27;b1</span>;</span><br><span class="line">	#<span class="number">3000</span> <span class="built_in">$stop</span>;</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="keyword">always</span> <span class="keyword">begin</span>      <span class="comment">// CP</span></span><br><span class="line">	CP = <span class="number">1&#x27;b0</span>;</span><br><span class="line">	CP = #<span class="number">10</span> <span class="number">1&#x27;b1</span>;</span><br><span class="line">	#<span class="number">10</span>;</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span>     <span class="comment">// RESET</span></span><br><span class="line">   LEFT = <span class="number">1&#x27;b1</span>;</span><br><span class="line">	RIGHT = <span class="number">1&#x27;b0</span>;</span><br><span class="line">	HAZ = <span class="number">1&#x27;b0</span>;</span><br><span class="line">   #<span class="number">1000</span>;</span><br><span class="line">	LEFT = <span class="number">1&#x27;b0</span>;</span><br><span class="line">	RIGHT = <span class="number">1&#x27;b1</span>;</span><br><span class="line">   #<span class="number">1000</span>;</span><br><span class="line">	RIGHT = <span class="number">1&#x27;b0</span>;</span><br><span class="line">	HAZ = <span class="number">1&#x27;b1</span>;</span><br><span class="line">   #<span class="number">1000</span>;</span><br><span class="line">	HAZ = <span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="【仿真波形图】-2"><a href="#【仿真波形图】-2" class="headerlink" title="【仿真波形图】"></a>【仿真波形图】</h4><p>Modelsim仿真波形图如下：</p>
<p><img src="https://s2.loli.net/2022/04/25/hZUXlYowi9rKavA.png" alt="2.1.1simulation.png"></p>
<p>第一个分界点在1000ns，由左转切换到右转， 2000ns的时候将右转切换到刹车</p>
<h4 id="【门级电路图】-2"><a href="#【门级电路图】-2" class="headerlink" title="【门级电路图】"></a>【门级电路图】</h4><p>使用quartus生成的RTL视图：</p>
<p><img src="https://s2.loli.net/2022/04/25/R5KGFJOCbsvmS1a.png" alt="2.1RTL.png"></p>
<h4 id="【资源占用情况】-2"><a href="#【资源占用情况】-2" class="headerlink" title="【资源占用情况】"></a>【资源占用情况】</h4><p>选用的芯片型号是Cyclone IV GX</p>
<p>系统综合后资源占用情况如下图所示：</p>
<p><img src="https://s2.loli.net/2022/04/25/tiVWS1a4xETuf3L.png" alt="2.1resource.png"></p>
<h3 id="one-hot一位热码编码"><a href="#one-hot一位热码编码" class="headerlink" title="one-hot一位热码编码"></a>one-hot一位热码编码</h3><p>这里选择使用one-hot码对状态进行编码，一共8个状态，需要使用8位编码。</p>
<h4 id="【实验程序代码】-3"><a href="#【实验程序代码】-3" class="headerlink" title="【实验程序代码】"></a>【实验程序代码】</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> car_lighting_con(CP,RESET,LEFT,RIGHT,HAZ,LC,LB,LA,RA,RB,RC);</span><br><span class="line">	<span class="keyword">input</span> CP,RESET;<span class="comment">//时钟、复位</span></span><br><span class="line">	<span class="keyword">input</span> LEFT,RIGHT,HAZ;<span class="comment">//左右转信号、刹车信号</span></span><br><span class="line">	<span class="keyword">output</span> <span class="keyword">reg</span> LC,LB,LA,RA,RB,RC;<span class="comment">//输出6个灯</span></span><br><span class="line">	<span class="keyword">reg</span>[<span class="number">2</span>:<span class="number">0</span>] currentState,nextState;</span><br><span class="line">	<span class="keyword">parameter</span> IDLE=<span class="number">8&#x27;b00000001</span>,L1=<span class="number">8&#x27;b00000010</span>,L2=<span class="number">8&#x27;b00000100</span>,</span><br><span class="line">L3=<span class="number">8&#x27;b00001000</span>,R1=<span class="number">8&#x27;b00010000</span>,R2=<span class="number">8&#x27;b00100000</span>,</span><br><span class="line">R3=<span class="number">8&#x27;b01000000</span>,LR=<span class="number">8&#x27;b10000000</span>;</span><br><span class="line">	<span class="comment">//一般不使用宏定义define，如果使用注意前面的`</span></span><br><span class="line"><span class="comment">//时钟和异步复位信号//</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> CP 	<span class="keyword">or</span> <span class="keyword">negedge</span> RESET)</span><br><span class="line">	<span class="keyword">begin</span> </span><br><span class="line">		<span class="keyword">if</span>(~RESET)</span><br><span class="line">		currentState&lt;=IDLE;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		currentState&lt;=nextState;</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="comment">//逻辑电路部分//</span></span><br><span class="line"><span class="keyword">always</span>@(currentState <span class="keyword">or</span> LEFT <span class="keyword">or</span> RIGHT <span class="keyword">or</span> HAZ)</span><br><span class="line">	<span class="keyword">begin</span> </span><br><span class="line">	<span class="keyword">case</span>(currentState)</span><br><span class="line">	IDLE:<span class="keyword">begin</span></span><br><span class="line">		<span class="keyword">if</span>(~(LEFT||RIGHT||HAZ))</span><br><span class="line">		nextState=IDLE;</span><br><span class="line">		<span class="keyword">if</span>(LEFT&amp;&amp;(~RIGHT)&amp;&amp;(~HAZ))</span><br><span class="line">		nextState=L1;</span><br><span class="line">		<span class="keyword">if</span>(LEFT&amp;&amp;RIGHT||HAZ)</span><br><span class="line">		nextState=LR;</span><br><span class="line">		<span class="keyword">if</span>((~LEFT)&amp;&amp;RIGHT&amp;&amp;(~HAZ))</span><br><span class="line">		nextState=R1;</span><br><span class="line">	<span class="keyword">end</span>	</span><br><span class="line">	L1:</span><br><span class="line">		nextState=(~HAZ)? L2:LR;		</span><br><span class="line">	L2:</span><br><span class="line">		nextState=(~HAZ)? L3:LR;		</span><br><span class="line">	L3:</span><br><span class="line">		nextState=IDLE;</span><br><span class="line">	R1:</span><br><span class="line">		nextState=(~HAZ)? R2:LR;</span><br><span class="line">	R2:</span><br><span class="line">		nextState=(~HAZ)? R3:LR;</span><br><span class="line">	R3:</span><br><span class="line">		nextState=IDLE;</span><br><span class="line">	LR:</span><br><span class="line">		nextState=IDLE;</span><br><span class="line">	<span class="keyword">endcase</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//译码器部分//</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="keyword">always</span>@(currentState)</span><br><span class="line">	<span class="keyword">begin</span></span><br><span class="line">		<span class="keyword">case</span>(currentState)</span><br><span class="line">	IDLE:<span class="keyword">begin</span></span><br><span class="line">	   &#123;LC,LB,LA,RA,RB,RC&#125;=<span class="number">6&#x27;b000000</span>;</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	L1:<span class="keyword">begin</span></span><br><span class="line">		&#123;LC,LB,LA,RA,RB,RC&#125;=<span class="number">6&#x27;b001000</span>;</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	L2:<span class="keyword">begin</span></span><br><span class="line">		&#123;LC,LB,LA,RA,RB,RC&#125;=<span class="number">6&#x27;b010000</span>;</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	L3:<span class="keyword">begin</span></span><br><span class="line">		&#123;LC,LB,LA,RA,RB,RC&#125;=<span class="number">6&#x27;b100000</span>;	</span><br><span class="line">		<span class="keyword">end</span>	</span><br><span class="line">	R1:<span class="keyword">begin</span></span><br><span class="line">		&#123;LC,LB,LA,RA,RB,RC&#125;=<span class="number">6&#x27;b000100</span>;	</span><br><span class="line">		<span class="keyword">end</span>	</span><br><span class="line">	R2:<span class="keyword">begin</span></span><br><span class="line">		&#123;LC,LB,LA,RA,RB,RC&#125;=<span class="number">6&#x27;b000010</span>;		</span><br><span class="line">		<span class="keyword">end</span>	</span><br><span class="line">	R3:<span class="keyword">begin</span></span><br><span class="line">	   &#123;LC,LB,LA,RA,RB,RC&#125;=<span class="number">6&#x27;b000001</span>;	</span><br><span class="line">		<span class="keyword">end</span>	</span><br><span class="line">	LR:<span class="keyword">begin</span></span><br><span class="line">	   &#123;LC,LB,LA,RA,RB,RC&#125;=<span class="number">6&#x27;b111111</span>;	</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">endcase</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="【testbench激励代码】-3"><a href="#【testbench激励代码】-3" class="headerlink" title="【testbench激励代码】"></a>【testbench激励代码】</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> test_car_lighting_con (); </span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span>        CP, RESET;</span><br><span class="line"><span class="keyword">reg</span>   	  LEFT,RIGHT,HAZ;</span><br><span class="line"><span class="keyword">wire</span> 		  LC,LB,LA,RA,RB,RC;</span><br><span class="line">car_lighting_con i1 (<span class="variable">.CP</span>(CP), <span class="variable">.RESET</span>(RESET), <span class="variable">.LEFT</span>(LEFT), </span><br><span class="line">			<span class="variable">.RIGHT</span>(RIGHT), <span class="variable">.HAZ</span>(HAZ), <span class="variable">.LC</span>(LC), <span class="variable">.LB</span>(LB), </span><br><span class="line">			<span class="variable">.LA</span>(LA), <span class="variable">.RA</span>(RA), <span class="variable">.RB</span>(RB), <span class="variable">.RC</span>(RC)); </span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span>     <span class="comment">// RESET</span></span><br><span class="line">	RESET = <span class="number">1&#x27;b0</span>;</span><br><span class="line">	RESET = #<span class="number">20</span> <span class="number">1&#x27;b1</span>;</span><br><span class="line">	#<span class="number">3000</span> <span class="built_in">$stop</span>;</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="keyword">always</span> <span class="keyword">begin</span>      <span class="comment">// CP</span></span><br><span class="line">	CP = <span class="number">1&#x27;b0</span>;</span><br><span class="line">	CP = #<span class="number">10</span> <span class="number">1&#x27;b1</span>;</span><br><span class="line">	#<span class="number">10</span>;</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span>     <span class="comment">// RESET</span></span><br><span class="line">   LEFT = <span class="number">1&#x27;b1</span>;</span><br><span class="line">	RIGHT = <span class="number">1&#x27;b0</span>;</span><br><span class="line">	HAZ = <span class="number">1&#x27;b0</span>;</span><br><span class="line">   #<span class="number">1000</span>;</span><br><span class="line">	LEFT = <span class="number">1&#x27;b0</span>;</span><br><span class="line">	RIGHT = <span class="number">1&#x27;b1</span>;</span><br><span class="line">   #<span class="number">1000</span>;</span><br><span class="line">	RIGHT = <span class="number">1&#x27;b0</span>;</span><br><span class="line">	HAZ = <span class="number">1&#x27;b1</span>;</span><br><span class="line">   #<span class="number">1000</span>;</span><br><span class="line">	HAZ = <span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="【仿真波形图】-3"><a href="#【仿真波形图】-3" class="headerlink" title="【仿真波形图】"></a>【仿真波形图】</h4><p>Modelsim仿真波形图如下：</p>
<p><img src="https://s2.loli.net/2022/04/25/aRqM1Yuspr2HBSC.png" alt="2.22simulation.png"></p>
<p>第一个分界点在1000ns，由左转切换到右转， 2000ns的时候将右转切换到刹车</p>
<h4 id="【门级电路图】-3"><a href="#【门级电路图】-3" class="headerlink" title="【门级电路图】"></a>【门级电路图】</h4><p>使用quartus生成的RTL视图：</p>
<h4 id="【资源占用情况】-3"><a href="#【资源占用情况】-3" class="headerlink" title="【资源占用情况】"></a>【资源占用情况】</h4><p>选用的芯片型号是Cyclone IV GX</p>
<p>系统综合后资源占用情况如下图所示：</p>
<p><img src="https://s2.loli.net/2022/04/25/cWH6EidoTmDU7hg.png" alt="2.2resource.png"></p>
<h2 id="实验三-10层楼电梯控制器模块"><a href="#实验三-10层楼电梯控制器模块" class="headerlink" title="实验三    10层楼电梯控制器模块"></a>实验三    10层楼电梯控制器模块</h2><h4 id="【实验内容及原理说明】-2"><a href="#【实验内容及原理说明】-2" class="headerlink" title="【实验内容及原理说明】"></a>【实验内容及原理说明】</h4><p>设计一个10层楼的电梯控制器模块。</p>
<p>要求：</p>
<p>(1) 以按键的时间先后优先级进行设计；</p>
<p>(2) 以楼层最短位置先后优先级进行设计；</p>
<p>电梯运行规则：</p>
<p>当电梯处在上升模式时，只响应比电梯所在位置高的上楼请求，由下向上逐个执行，直到最后一个上楼请求执行完毕。如果高层有下楼请求，直接升到有下楼请求的最高楼层，然后进入下降模式。下降模式类似。</p>
<p>定义每层楼的状态，可扩展至任意楼层。</p>
<p>UP(IN):XXXXXXXXXX(10~1楼；1有效，0无效)，上楼请求</p>
<p>DOWN(IN):XXXXXXXXXX(10~1楼；1有效，0无效)，下楼请求</p>
<p>其中1层只能有上楼请求，10层只能有下楼请求，同一层不能既有上楼请求又有下楼请求。上楼或下楼请求被响应后对应位清零。</p>
<p>BUTTON(IN):XXXXXXXXXX(10~1楼；1有效，0无效)，要去往的楼层</p>
<p>到达要去往的楼层后对应位清零。</p>
<p>POSITION(OUT):XXXX(当前楼层)</p>
<p>FLOOR:XXXXXXXXXX(10~1楼；1有效，0无效)，电梯需要停下并开关门的楼层</p>
<p>电梯处在上升模式时，FLOOR=UP|BUTTON；电梯处在下降模式时，FLOOR=DOWN|BUTTON。</p>
<p>UP_DOWN:X(0上升模式，1下降模式)</p>
<h3 id="采用one-hot编码方式"><a href="#采用one-hot编码方式" class="headerlink" title="采用one-hot编码方式"></a>采用one-hot编码方式</h3><h4 id="【实验程序代码】-4"><a href="#【实验程序代码】-4" class="headerlink" title="【实验程序代码】"></a>【实验程序代码】</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> elevator (CLK,RESET,UP,DOWN,BUTTON,POSITION);</span><br><span class="line"> <span class="keyword">input</span> CLK,RESET;</span><br><span class="line"> <span class="keyword">input</span> [<span class="number">10</span>:<span class="number">1</span>] UP,DOWN,BUTTON;</span><br><span class="line"> <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] POSITION;</span><br><span class="line"> <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] P;</span><br><span class="line"> <span class="keyword">reg</span> [<span class="number">10</span>:<span class="number">1</span>] FLOOR;</span><br><span class="line"> <span class="keyword">reg</span> UP_DOWN;</span><br><span class="line"> <span class="keyword">reg</span> tmp,flag;</span><br><span class="line"> <span class="keyword">integer</span> temp;</span><br><span class="line"> <span class="keyword">reg</span> [<span class="number">8</span>:<span class="number">0</span>] CurrentState,NextState;</span><br><span class="line"> <span class="keyword">parameter</span> S0=<span class="number">9&#x27;b000000001</span>,S1=<span class="number">9&#x27;b000000010</span>,S2=<span class="number">9&#x27;b000000100</span>,S3=<span class="number">9&#x27;b000001000</span>,S4=<span class="number">9&#x27;b000010000</span>,S5=<span class="number">9&#x27;b000100000</span>,S6=<span class="number">9&#x27;b001000000</span>,S7=<span class="number">9&#x27;b010000000</span>,S8=<span class="number">9&#x27;b100000000</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">always</span> @ (<span class="keyword">posedge</span> CLK <span class="keyword">or</span> <span class="keyword">negedge</span> RESET)</span><br><span class="line"> <span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span>(~RESET) CurrentState&lt;=S0;</span><br><span class="line">  <span class="keyword">else</span> CurrentState&lt;=NextState;</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">always</span> @ (RESET <span class="keyword">or</span> CurrentState <span class="keyword">or</span> UP_DOWN <span class="keyword">or</span> UP <span class="keyword">or</span> DOWN <span class="keyword">or</span> BUTTON <span class="keyword">or</span> P <span class="keyword">or</span> flag)</span><br><span class="line"> <span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span>(~RESET)</span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">   UP_DOWN=<span class="number">0</span>;</span><br><span class="line">   FLOOR=<span class="number">10&#x27;b0</span>;</span><br><span class="line">   P=<span class="number">4&#x27;b0001</span>;</span><br><span class="line">   flag=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">if</span>(flag==<span class="number">0</span>) FLOOR=UP_DOWN?DOWN|BUTTON:UP|BUTTON;</span><br><span class="line">   <span class="keyword">case</span>(CurrentState)</span><br><span class="line">    S0:</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">     POSITION=P;</span><br><span class="line">     <span class="keyword">if</span>(FLOOR==<span class="number">10&#x27;b0</span>) NextState=S0;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">       <span class="keyword">if</span>(UP_DOWN==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">         <span class="keyword">if</span>(P==<span class="number">4&#x27;b1010</span>) UP_DOWN=<span class="number">1</span>;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">          <span class="keyword">begin</span></span><br><span class="line">           <span class="keyword">case</span>(P)</span><br><span class="line">            <span class="number">4&#x27;b0001</span>:</span><br><span class="line">             tmp=FLOOR[<span class="number">2</span>] | FLOOR[<span class="number">3</span>] | FLOOR[<span class="number">4</span>] | FLOOR[<span class="number">5</span>] | FLOOR[<span class="number">6</span>] | FLOOR[<span class="number">7</span>] | FLOOR[<span class="number">8</span>] | FLOOR[<span class="number">9</span>] | FLOOR[<span class="number">10</span>];</span><br><span class="line">            <span class="number">4&#x27;b0010</span>:</span><br><span class="line">             tmp=FLOOR[<span class="number">3</span>] | FLOOR[<span class="number">4</span>] | FLOOR[<span class="number">5</span>] | FLOOR[<span class="number">6</span>] | FLOOR[<span class="number">7</span>] | FLOOR[<span class="number">8</span>] | FLOOR[<span class="number">9</span>] | FLOOR[<span class="number">10</span>];</span><br><span class="line">            <span class="number">4&#x27;b0011</span>:</span><br><span class="line">             tmp=FLOOR[<span class="number">4</span>] | FLOOR[<span class="number">5</span>] | FLOOR[<span class="number">6</span>] | FLOOR[<span class="number">7</span>] | FLOOR[<span class="number">8</span>] | FLOOR[<span class="number">9</span>] | FLOOR[<span class="number">10</span>];</span><br><span class="line">            <span class="number">4&#x27;b0100</span>:</span><br><span class="line">             tmp=FLOOR[<span class="number">5</span>] | FLOOR[<span class="number">6</span>] | FLOOR[<span class="number">7</span>] | FLOOR[<span class="number">8</span>] | FLOOR[<span class="number">9</span>] | FLOOR[<span class="number">10</span>];</span><br><span class="line">            <span class="number">4&#x27;b0101</span>:</span><br><span class="line">             tmp=FLOOR[<span class="number">6</span>] | FLOOR[<span class="number">7</span>] | FLOOR[<span class="number">8</span>] | FLOOR[<span class="number">9</span>] | FLOOR[<span class="number">10</span>];</span><br><span class="line">            <span class="number">4&#x27;b0110</span>:</span><br><span class="line">             tmp=FLOOR[<span class="number">7</span>] | FLOOR[<span class="number">8</span>] | FLOOR[<span class="number">9</span>] | FLOOR[<span class="number">10</span>];</span><br><span class="line">            <span class="number">4&#x27;b0111</span>:</span><br><span class="line">             tmp=FLOOR[<span class="number">8</span>] | FLOOR[<span class="number">9</span>] | FLOOR[<span class="number">10</span>];</span><br><span class="line">            <span class="number">4&#x27;b1000</span>:</span><br><span class="line">             tmp=FLOOR[<span class="number">9</span>] | FLOOR[<span class="number">10</span>];</span><br><span class="line">            <span class="number">4&#x27;b1001</span>:</span><br><span class="line">             tmp=FLOOR[<span class="number">10</span>];      </span><br><span class="line">           <span class="keyword">endcase</span></span><br><span class="line">           <span class="keyword">if</span>(tmp==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">             FLOOR=DOWN|BUTTON;</span><br><span class="line">             <span class="keyword">case</span>(P)</span><br><span class="line">              <span class="number">4&#x27;b0001</span>:</span><br><span class="line">               tmp=FLOOR[<span class="number">2</span>] | FLOOR[<span class="number">3</span>] | FLOOR[<span class="number">4</span>] | FLOOR[<span class="number">5</span>] | FLOOR[<span class="number">6</span>] | FLOOR[<span class="number">7</span>] | FLOOR[<span class="number">8</span>] | FLOOR[<span class="number">9</span>] | FLOOR[<span class="number">10</span>];</span><br><span class="line">              <span class="number">4&#x27;b0010</span>:</span><br><span class="line">               tmp=FLOOR[<span class="number">3</span>] | FLOOR[<span class="number">4</span>] | FLOOR[<span class="number">5</span>] | FLOOR[<span class="number">6</span>] | FLOOR[<span class="number">7</span>] | FLOOR[<span class="number">8</span>] | FLOOR[<span class="number">9</span>] | FLOOR[<span class="number">10</span>];</span><br><span class="line">              <span class="number">4&#x27;b0011</span>:</span><br><span class="line">               tmp=FLOOR[<span class="number">4</span>] | FLOOR[<span class="number">5</span>] | FLOOR[<span class="number">6</span>] | FLOOR[<span class="number">7</span>] | FLOOR[<span class="number">8</span>] | FLOOR[<span class="number">9</span>] | FLOOR[<span class="number">10</span>];</span><br><span class="line">              <span class="number">4&#x27;b0100</span>:</span><br><span class="line">               tmp=FLOOR[<span class="number">5</span>] | FLOOR[<span class="number">6</span>] | FLOOR[<span class="number">7</span>] | FLOOR[<span class="number">8</span>] | FLOOR[<span class="number">9</span>] | FLOOR[<span class="number">10</span>];</span><br><span class="line">              <span class="number">4&#x27;b0101</span>:</span><br><span class="line">               tmp=FLOOR[<span class="number">6</span>] | FLOOR[<span class="number">7</span>] | FLOOR[<span class="number">8</span>] | FLOOR[<span class="number">9</span>] | FLOOR[<span class="number">10</span>];</span><br><span class="line">              <span class="number">4&#x27;b0110</span>:</span><br><span class="line">               tmp=FLOOR[<span class="number">7</span>] | FLOOR[<span class="number">8</span>] | FLOOR[<span class="number">9</span>] | FLOOR[<span class="number">10</span>];</span><br><span class="line">              <span class="number">4&#x27;b0111</span>:</span><br><span class="line">               tmp=FLOOR[<span class="number">8</span>] | FLOOR[<span class="number">9</span>] | FLOOR[<span class="number">10</span>];</span><br><span class="line">              <span class="number">4&#x27;b1000</span>:</span><br><span class="line">               tmp=FLOOR[<span class="number">9</span>] | FLOOR[<span class="number">10</span>];</span><br><span class="line">              <span class="number">4&#x27;b1001</span>:</span><br><span class="line">               tmp=FLOOR[<span class="number">10</span>];          </span><br><span class="line">             <span class="keyword">endcase</span></span><br><span class="line">             <span class="keyword">if</span>(tmp==<span class="number">0</span>) UP_DOWN=<span class="number">1</span>;</span><br><span class="line">             <span class="keyword">else</span> </span><br><span class="line">              <span class="keyword">begin</span></span><br><span class="line">               flag=<span class="number">1</span>;</span><br><span class="line">               UP_DOWN=<span class="number">0</span>;              </span><br><span class="line">              <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">         <span class="keyword">if</span>(P==<span class="number">4&#x27;b0001</span>) UP_DOWN=<span class="number">0</span>;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">          <span class="keyword">begin</span></span><br><span class="line">           <span class="keyword">case</span>(P)</span><br><span class="line">            <span class="number">4&#x27;b1010</span>:</span><br><span class="line">             tmp=FLOOR[<span class="number">9</span>] | FLOOR[<span class="number">8</span>] | FLOOR[<span class="number">7</span>] | FLOOR[<span class="number">6</span>] | FLOOR[<span class="number">5</span>] | FLOOR[<span class="number">4</span>] | FLOOR[<span class="number">3</span>] | FLOOR[<span class="number">2</span>] | FLOOR[<span class="number">1</span>];</span><br><span class="line">            <span class="number">4&#x27;b1001</span>:</span><br><span class="line">             tmp=FLOOR[<span class="number">8</span>] | FLOOR[<span class="number">7</span>] | FLOOR[<span class="number">6</span>] | FLOOR[<span class="number">5</span>] | FLOOR[<span class="number">4</span>] | FLOOR[<span class="number">3</span>] | FLOOR[<span class="number">2</span>] | FLOOR[<span class="number">1</span>];</span><br><span class="line">            <span class="number">4&#x27;b1000</span>:</span><br><span class="line">             tmp=FLOOR[<span class="number">7</span>] | FLOOR[<span class="number">6</span>] | FLOOR[<span class="number">5</span>] | FLOOR[<span class="number">4</span>] | FLOOR[<span class="number">3</span>] | FLOOR[<span class="number">2</span>] | FLOOR[<span class="number">1</span>];</span><br><span class="line">            <span class="number">4&#x27;b0111</span>:</span><br><span class="line">             tmp=FLOOR[<span class="number">6</span>] | FLOOR[<span class="number">5</span>] | FLOOR[<span class="number">4</span>] | FLOOR[<span class="number">3</span>] | FLOOR[<span class="number">2</span>] | FLOOR[<span class="number">1</span>];</span><br><span class="line">            <span class="number">4&#x27;b0110</span>:</span><br><span class="line">             tmp=FLOOR[<span class="number">5</span>] | FLOOR[<span class="number">4</span>] | FLOOR[<span class="number">3</span>] | FLOOR[<span class="number">2</span>] | FLOOR[<span class="number">1</span>];</span><br><span class="line">            <span class="number">4&#x27;b0101</span>:</span><br><span class="line">             tmp=FLOOR[<span class="number">4</span>] | FLOOR[<span class="number">3</span>] | FLOOR[<span class="number">2</span>] | FLOOR[<span class="number">1</span>];</span><br><span class="line">            <span class="number">4&#x27;b0100</span>:</span><br><span class="line">             tmp=FLOOR[<span class="number">3</span>] | FLOOR[<span class="number">2</span>] | FLOOR[<span class="number">1</span>];</span><br><span class="line">            <span class="number">4&#x27;b0011</span>:</span><br><span class="line">             tmp=FLOOR[<span class="number">2</span>] | FLOOR[<span class="number">1</span>];</span><br><span class="line">            <span class="number">4&#x27;b0010</span>:</span><br><span class="line">             tmp=FLOOR[<span class="number">1</span>];          </span><br><span class="line">           <span class="keyword">endcase</span></span><br><span class="line">           <span class="keyword">if</span>(tmp==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">             FLOOR=UP|BUTTON;</span><br><span class="line">             <span class="keyword">case</span>(P)</span><br><span class="line">              <span class="number">4&#x27;b1010</span>:</span><br><span class="line">               tmp=FLOOR[<span class="number">9</span>] | FLOOR[<span class="number">8</span>] | FLOOR[<span class="number">7</span>] | FLOOR[<span class="number">6</span>] | FLOOR[<span class="number">5</span>] | FLOOR[<span class="number">4</span>] | FLOOR[<span class="number">3</span>] | FLOOR[<span class="number">2</span>] | FLOOR[<span class="number">1</span>];</span><br><span class="line">              <span class="number">4&#x27;b1001</span>:</span><br><span class="line">               tmp=FLOOR[<span class="number">8</span>] | FLOOR[<span class="number">7</span>] | FLOOR[<span class="number">6</span>] | FLOOR[<span class="number">5</span>] | FLOOR[<span class="number">4</span>] | FLOOR[<span class="number">3</span>] | FLOOR[<span class="number">2</span>] | FLOOR[<span class="number">1</span>];</span><br><span class="line">              <span class="number">4&#x27;b1000</span>:</span><br><span class="line">               tmp=FLOOR[<span class="number">7</span>] | FLOOR[<span class="number">6</span>] | FLOOR[<span class="number">5</span>] | FLOOR[<span class="number">4</span>] | FLOOR[<span class="number">3</span>] | FLOOR[<span class="number">2</span>] | FLOOR[<span class="number">1</span>];</span><br><span class="line">              <span class="number">4&#x27;b0111</span>:</span><br><span class="line">               tmp=FLOOR[<span class="number">6</span>] | FLOOR[<span class="number">5</span>] | FLOOR[<span class="number">4</span>] | FLOOR[<span class="number">3</span>] | FLOOR[<span class="number">2</span>] | FLOOR[<span class="number">1</span>];</span><br><span class="line">              <span class="number">4&#x27;b0110</span>:</span><br><span class="line">               tmp=FLOOR[<span class="number">5</span>] | FLOOR[<span class="number">4</span>] | FLOOR[<span class="number">3</span>] | FLOOR[<span class="number">2</span>] | FLOOR[<span class="number">1</span>];</span><br><span class="line">              <span class="number">4&#x27;b0101</span>:</span><br><span class="line">               tmp=FLOOR[<span class="number">4</span>] | FLOOR[<span class="number">3</span>] | FLOOR[<span class="number">2</span>] | FLOOR[<span class="number">1</span>];</span><br><span class="line">              <span class="number">4&#x27;b0100</span>:</span><br><span class="line">               tmp=FLOOR[<span class="number">3</span>] | FLOOR[<span class="number">2</span>] | FLOOR[<span class="number">1</span>];</span><br><span class="line">              <span class="number">4&#x27;b0011</span>:</span><br><span class="line">               tmp=FLOOR[<span class="number">2</span>] | FLOOR[<span class="number">1</span>];</span><br><span class="line">              <span class="number">4&#x27;b0010</span>:</span><br><span class="line">               tmp=FLOOR[<span class="number">1</span>];          </span><br><span class="line">             <span class="keyword">endcase</span></span><br><span class="line">             <span class="keyword">if</span>(tmp==<span class="number">0</span>) UP_DOWN=<span class="number">0</span>;</span><br><span class="line">             <span class="keyword">else</span> </span><br><span class="line">              <span class="keyword">begin</span></span><br><span class="line">               flag=<span class="number">1</span>;</span><br><span class="line">               UP_DOWN=<span class="number">1</span>;              </span><br><span class="line">              <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">       NextState=S1;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    S1:</span><br><span class="line">     NextState=S2;</span><br><span class="line">    S2:</span><br><span class="line">     NextState=S3;</span><br><span class="line">    S3:</span><br><span class="line">     NextState=S4;</span><br><span class="line">    S4:</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">     <span class="keyword">if</span>(UP_DOWN==<span class="number">0</span>) NextState=S5;</span><br><span class="line">     <span class="keyword">else</span> NextState=S6;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    S5:</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">     <span class="keyword">if</span>(FLOOR==<span class="number">10&#x27;b0</span>) NextState=S0;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">       P=P+<span class="number">1&#x27;b1</span>;</span><br><span class="line">       <span class="keyword">if</span>(flag==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">begin</span>: B1</span><br><span class="line">         <span class="keyword">integer</span> i;</span><br><span class="line">         temp=<span class="number">0</span>;</span><br><span class="line">         <span class="keyword">for</span>(i=<span class="number">10</span>;i&gt;<span class="number">0</span> &amp;&amp; temp==<span class="number">0</span>;i=i-<span class="number">1</span>)</span><br><span class="line">          <span class="keyword">if</span>(FLOOR[i]==<span class="number">1</span>) temp=i;</span><br><span class="line">         <span class="keyword">if</span>(P==temp) </span><br><span class="line">          <span class="keyword">begin</span></span><br><span class="line">           flag=<span class="number">0</span>;</span><br><span class="line">           UP_DOWN=<span class="number">1</span>;</span><br><span class="line">           NextState=S0;</span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">          NextState=S7;     </span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">         <span class="keyword">if</span>(FLOOR[P]) NextState=S0;</span><br><span class="line">         <span class="keyword">else</span> NextState=S7;</span><br><span class="line">        <span class="keyword">end</span> </span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    S6:</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">     <span class="keyword">if</span>(FLOOR==<span class="number">10&#x27;b0</span>) NextState=S0;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">       P=P-<span class="number">1&#x27;b1</span>;</span><br><span class="line">       <span class="keyword">if</span>(flag==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">begin</span>: B2</span><br><span class="line">         <span class="keyword">integer</span> i;</span><br><span class="line">         temp=<span class="number">0</span>;</span><br><span class="line">         <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">11</span> &amp;&amp; temp==<span class="number">0</span>;i=i+<span class="number">1</span>)</span><br><span class="line">          <span class="keyword">if</span>(FLOOR[i]==<span class="number">1</span>) temp=i;</span><br><span class="line">         <span class="keyword">if</span>(P==temp) </span><br><span class="line">          <span class="keyword">begin</span></span><br><span class="line">           flag=<span class="number">0</span>;</span><br><span class="line">           UP_DOWN=<span class="number">0</span>;</span><br><span class="line">           NextState=S0;</span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">          NextState=S8;     </span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">         <span class="keyword">if</span>(FLOOR[P]) NextState=S0;</span><br><span class="line">         <span class="keyword">else</span> NextState=S8;</span><br><span class="line">        <span class="keyword">end</span> </span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    S7:</span><br><span class="line">     NextState=S5;</span><br><span class="line">    S8:</span><br><span class="line">     NextState=S6;</span><br><span class="line">   <span class="keyword">endcase</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="【testbench激励代码】-4"><a href="#【testbench激励代码】-4" class="headerlink" title="【testbench激励代码】"></a>【testbench激励代码】</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1ns/1ns</span></span><br><span class="line"><span class="keyword">module</span> test_elevator;</span><br><span class="line"> <span class="keyword">reg</span> CLK,RESET;</span><br><span class="line"> <span class="keyword">reg</span> [<span class="number">10</span>:<span class="number">1</span>] UP,DOWN,BUTTON;</span><br><span class="line"> <span class="keyword">wire</span> [<span class="number">3</span>:<span class="number">0</span>] POSITION;</span><br><span class="line"> elevator U0(CLK,RESET,UP,DOWN,BUTTON,POSITION);</span><br><span class="line"> <span class="keyword">always</span> <span class="keyword">begin</span></span><br><span class="line">  CLK=<span class="number">1&#x27;b0</span>;</span><br><span class="line">  #<span class="number">5</span> CLK=<span class="number">1&#x27;b1</span>;</span><br><span class="line">  #<span class="number">5</span>;</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"> <span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">  RESET=<span class="number">1&#x27;b0</span>;</span><br><span class="line">  #<span class="number">10</span> RESET=<span class="number">1&#x27;b1</span>;</span><br><span class="line">  #<span class="number">790</span> <span class="built_in">$stop</span>;</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"> <span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">  UP=<span class="number">10&#x27;b0</span>;</span><br><span class="line">  #<span class="number">10</span> UP=<span class="number">10&#x27;b0000010001</span>;</span><br><span class="line">  #<span class="number">40</span> UP=<span class="number">10&#x27;b0000010000</span>;</span><br><span class="line">  #<span class="number">160</span> UP=<span class="number">10&#x27;b0</span>;  </span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"> <span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">  DOWN=<span class="number">10&#x27;b0</span>;</span><br><span class="line">  #<span class="number">210</span> DOWN=<span class="number">10&#x27;b1100000000</span>;</span><br><span class="line">  #<span class="number">180</span> DOWN=<span class="number">10&#x27;b0100000000</span>;</span><br><span class="line">  #<span class="number">60</span> DOWN=<span class="number">10&#x27;b0</span>;</span><br><span class="line">  #<span class="number">120</span> DOWN=<span class="number">10&#x27;b0000100000</span>;</span><br><span class="line">  #<span class="number">40</span> DOWN=<span class="number">10&#x27;b0</span>;</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"> <span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">  BUTTON=<span class="number">10&#x27;b0</span>;</span><br><span class="line">  #<span class="number">10</span> BUTTON=<span class="number">10&#x27;b0000001000</span>;</span><br><span class="line">  #<span class="number">140</span> BUTTON=<span class="number">10&#x27;b0</span>;</span><br><span class="line">  #<span class="number">20</span> BUTTON=<span class="number">10&#x27;b0010000000</span>;</span><br><span class="line">  #<span class="number">140</span> BUTTON=<span class="number">10&#x27;b0</span>;</span><br><span class="line">  #<span class="number">40</span> BUTTON=<span class="number">10&#x27;b0000100000</span>;</span><br><span class="line">  #<span class="number">200</span> BUTTON=<span class="number">10&#x27;b0</span>;</span><br><span class="line">  #<span class="number">20</span> BUTTON=<span class="number">10&#x27;b0000000001</span>;</span><br><span class="line">  #<span class="number">180</span> BUTTON=<span class="number">10&#x27;b0</span>;</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="【仿真波形图】-4"><a href="#【仿真波形图】-4" class="headerlink" title="【仿真波形图】"></a>【仿真波形图】</h4><p>Modelsim仿真波形图如下：</p>
<p><img src="https://s2.loli.net/2022/04/25/s3jSHmr6P98vKwV.png" alt="2.2resource.png"></p>
<h4 id="【门级电路图】-4"><a href="#【门级电路图】-4" class="headerlink" title="【门级电路图】"></a>【门级电路图】</h4><p>使用quartus生成的RTL视图：</p>
<p><img src="https://s2.loli.net/2022/04/25/6QnRzJt7AsKFuvM.png" alt="2.2resource.png"></p>
<h4 id="【资源占用情况】-4"><a href="#【资源占用情况】-4" class="headerlink" title="【资源占用情况】"></a>【资源占用情况】</h4><h1 id="实验结果分析及思考"><a href="#实验结果分析及思考" class="headerlink" title="实验结果分析及思考"></a>实验结果分析及思考</h1><ol>
<li>首先是对其中资源占用截图中第一行的时间问题，quartus软件是有很多破解方法的，但是破解都失败了，只有30天的试用期；当时做EDA软件实验的时候安装的这款软件，相较于破解，直接更改系统的时间，相当于可以一直处于试用期30天以内。这就是为什么会显示2021年4月的原因。</li>
<li>小轿车尾灯控制系统是自己完全参照学习内容，根据课本上绘制的状态转换图独立进行的编码设计，为了便于调试实验结果，在其中加入了复位信号输入端RESET，输入低电平有效。整个系统设计大概分成四个部分，第一部分是输入输出以及状态变量的声明部分，第二部分是对时钟和复位信号的always@声明，敏感事件列表中为CP和RESET；第三部分也是最核心的部分是组合逻辑部分，对系统状态切换描述的部分；第四部分是对状态的结果进行译码的译码部分。</li>
</ol>
]]></content>
      <tags>
        <tag>FPGA实验</tag>
      </tags>
  </entry>
  <entry>
    <title>考研单词笔记1</title>
    <url>/2022/04/26/%E8%80%83%E7%A0%94%E5%8D%95%E8%AF%8D%E7%AC%94%E8%AE%B01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="考研单词笔记1"><a href="#考研单词笔记1" class="headerlink" title="考研单词笔记1"></a>考研单词笔记1</h2><hr>
<blockquote>
<p>prone              adj    有倾向的，俯卧的</p>
<p>retail               n/adv/vt    零售</p>
<p>thereafter      adv    之后，伺候</p>
<p>confess           v    供认，承认，坦白</p>
<p>scandal           n    丑闻，丑行</p>
<p>immune          adj    免疫的，不受影响的</p>
<p>corrupt           adj、v    腐败的，不道德的，使腐化</p>
<p>loan                 n    贷款</p>
<p>mortgage       n、vt抵押借款</p>
<p>identical         adj    完全相同的，同样的</p>
<p>identity           n    身份本体，个体，特性，相同</p>
<p>inevitable       adj    不可避免的，必然发生的</p>
<p>yield                vt    出产，得出，放弃</p>
<p>adhere            vi    附着，遵循（规章）</p>
<p>peer                n、vi    同龄人，端详</p>
<p>leisure            n    闲暇，空闲</p>
<p>recreation      n    休闲，娱乐</p>
<p>shield              n、vt    盾牌，掩护物，保护某人或某物</p>
<p>persevere       vi    坚持不懈，锲而不舍</p>
<p>facility             n    设备设施，天资</p>
<p>utility               n、adj    公共事业，实用，多功能的，多用途的</p>
<p>utilize              vt    利用使用</p>
<p>consolidate    vt、vi    使加强，巩固，合并</p>
<p>household     n、adj    一家人，家用的</p>
<p>regardless     adv    不管不论</p>
<p>spite               n、vt    怨恨，恶意，故意伤害</p>
<p>spray              vt、n    喷，喷雾，喷洒</p>
<p>pray                vt，adv    祈祷，祈求，请问</p>
<p>nevertheless  adv    然而，尽管如此</p>
<p>provided         cong    如果，在…条件下</p>
<p>lest                   conj    唯恐，以免</p>
<p>possess            vt    拥有，具有，支配</p>
<p>asset                n    资产，财产</p>
<p>sketch             n，vt    草图素描，概述</p>
<p>moral              adj，n    道德的，品行道德，寓意</p>
<p>ethic                n    伦理，道德体系</p>
<p>timid                adj    胆怯的，羞怯的</p>
<p>interfere          vi    介入，干涉，妨碍，干扰</p>
<p>interval            n    间隔，中场休息</p>
<p>interact            vi    相互沟通，相互作用</p>
<p>interpret          vt，vi解释说明，口译</p>
<p>recommend    vt    推荐，建议</p>
<p>receipt             n    收据，收到，收入</p>
<p>recipe              n    食谱，原因</p>
<p>multitude        n    众多大量，民众，群众</p>
<p>triple                vi，vt    变成三倍</p>
<p>trail                  n，vi,vt     审判，试用，测试</p>
<p>prevail            vi    盛行，站上风，战胜</p>
<p>cease              vi,vt    使停止</p>
<p>halt                 n，vi,vt    停止，暂停</p>
<p>suspend        vt     暂停，中止，使停职</p>
<p>resume         vt，vi    继续</p>
<p>flourish         vi，vt,n    繁荣，挥舞，夸张动作</p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>考研单词笔记</category>
      </categories>
      <tags>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>经典的错误，标准的零分</title>
    <url>/2022/04/26/%E7%BB%8F%E5%85%B8%E7%9A%84%E9%94%99%E8%AF%AF%EF%BC%8C%E6%A0%87%E5%87%86%E7%9A%84%E9%9B%B6%E5%88%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://i.imgtg.com/2022/04/26/x9bxX.png" alt="x9bxX.png"></p>
]]></content>
  </entry>
  <entry>
    <title>常用软件推荐</title>
    <url>/2022/04/26/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="常用软件推荐"><a href="#常用软件推荐" class="headerlink" title="常用软件推荐"></a>常用软件推荐</h1><h2 id="百度文库下载"><a href="#百度文库下载" class="headerlink" title="百度文库下载"></a>百度文库下载</h2><p>推荐<a href="https://pan.baidu.com/s/14Mq7d6QOlrLyxigzIt-BXg?pwd=m7tx">冰点文库</a></p>
<p>提取码：m7tx</p>
<p>使用教程：百度网盘提取链接保存，下载即可使用</p>
<p>复制链接，一键免费下载</p>
<h2 id="IDM下载器"><a href="#IDM下载器" class="headerlink" title="IDM下载器"></a>IDM下载器</h2><p>官方下载链接：</p>
<p><a href="http://ys-f.ysepan.com/549340427/713028443/SIuLRKu75275M326WNGJe0/idman640build11.exe">IDM官方版</a></p>
<p>适配win11版本<a href="http://ys-e.ysepan.com/549340455/712985354/VFtMVLr7435652GKJN5784/idman640build1.exe">IDM</a></p>
<p>破解方式：重置试用</p>
<p>仅需删除注册表信息即可重复试用30天，之后重复操作即可。</p>
<p>直接下载<a href="https://musetransfer.com/s/tbvsynzkd">reset.reg</a>，退出正在运行的IDM，运行reset.reg文件清除IDM注册表。</p>
<h2 id="免费开源视频剪辑软件-OpenShot"><a href="#免费开源视频剪辑软件-OpenShot" class="headerlink" title="免费开源视频剪辑软件 OpenShot"></a>免费开源视频剪辑软件 OpenShot</h2><p>OpenShot 创建于 2008 年，是一个免费开源的视频编辑器。可在 Linux，Mac 和 Windows 上使用。界面操作对新手比较友好。</p>
<p><a href="https://www.openshot.org/zh-hans/download/"> 官网下载</a></p>
<p>文件来自 OpenShot 官网，仅做加速下载分发用途</p>
<h2 id="格式工厂-Format-Factory"><a href="#格式工厂-Format-Factory" class="headerlink" title="格式工厂 (Format Factory)"></a>格式工厂 (Format Factory)</h2><p>格式工厂 (Format Factory) 是老牌知名免费音视频 / 压缩转换软件。</p>
<p>从 2007 年开始格式工厂一直更新保持更新，始终免费，转换、压缩 媒体文件用格式工厂很简单。</p>
<h3 id="格式工厂精简优化版"><a href="#格式工厂精简优化版" class="headerlink" title="格式工厂精简优化版"></a>格式工厂精简优化版</h3><p><a href="https://www.aliyundrive.com/s/8bdfdJQTWNC">https://www.aliyundrive.com/s/8bdfdJQTWNC</a><br><a href="https://www.lanzoup.com/b00ta661i">https://www.lanzoup.com/b00ta661i</a></p>
<p>格式工厂精简优化版 Windows ，包含经典版 / 稳定版 / 最新版，精简了多余功能去除了广告。</p>
<h3 id="格式工厂安卓版"><a href="#格式工厂安卓版" class="headerlink" title="格式工厂安卓版"></a>格式工厂安卓版</h3><p>格式工厂更新了安卓版本，可使用下方免费无限制版本</p>
<p><a href="https://musetransfer.com/s/oqzn5owqp">https://musetransfer.com/s/oqzn5owqp</a></p>
<p>格式工厂安卓无限制版，移除了付费功能，所有功能无限制使用。</p>
]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>考研单词笔记3</title>
    <url>/2022/04/28/%E8%80%83%E7%A0%94%E5%8D%95%E8%AF%8D%E7%AC%94%E8%AE%B03/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="考研单词笔记3"><a href="#考研单词笔记3" class="headerlink" title="考研单词笔记3"></a>考研单词笔记3</h2><p>The Examination Of Postgraduates</p>
<hr>
<details class="folding-tag" cyan><summary> 查看 </summary>
              <div class='content'>
              <blockquote><p>distinguish    vi,vt    区分，辨别，分清</p><p>instinct    n    本能天性，直觉</p><p>vulgar    adj    粗俗的，俗气的</p><p>deteriorate    vi    恶化，变坏，衰退</p><p>curb    vt,n    控制抑制；起控制作用的事物</p><p>stem    n，vt,vi    植物的茎秆；阻止遏制；源于</p><p>evolve    vivt    进化，逐步发展</p><p>steer    vtvi    驾驶，行驶</p><p>refrain    vi,n    克制避免；陈词滥调，副歌</p><p>restrain    vt    用武力阻止，克制</p><p>constrain    vt    限制，约束，强迫</p><p>institute    n    学院，学会</p><p>specialize    vi    专功，专门研究</p><p>speciality    n    特长，专业，专长</p><p>recur    vi    重现，复发，再来</p><p>underline    vt    构成…的基础或起因</p><p>endure    v    忍耐，忍受，持久</p><p>storage    n    贮藏，存储，贮存量</p><p>abundant    adj    大量的，充裕的</p><p>trail        审判试用试验</p><p>arrest    n    拘留逮捕，吸引注意</p><p>gamble    v    冒险赌博投机</p><p>chronic    adj    慢性的，长久的</p><p>intrinsic    adj    固有的，内在的 ，本质的</p><p>formidable    adj    可怕的，令人敬畏的</p><p>surplus    n    过剩，剩余</p><p>nuclear    adj    核能的，核心的</p><p>nucleus    n    原子（核）</p><p>blast    n    爆炸，一阵风，一股气流</p><p>deadly    adj    致命的，势不两立的，极端的</p><p>expedition    n    探险队</p><p>dismay    n    失望，气馁，惊恐</p><p>illustrate    vt    说明，加插图</p><p>exemplify    vt    举例证明</p><p>demonstrate    vt     证明，举行示威游行</p><p>demonstration    n    论证，示威游行</p><p>symptom    n    征兆，特征</p><p>diagnose    vt    诊断，判断    diagnosis    n    诊断</p><p>terminal    n    终点，终端</p><p>imply    vt    暗示，意味着</p><p>cite    vt    引用，引证</p></blockquote>
              </div>
            </details>]]></content>
      <categories>
        <category>考研单词笔记</category>
      </categories>
      <tags>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>解决github绑定域名自动解绑问题</title>
    <url>/2022/04/27/%E8%A7%A3%E5%86%B3github%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E8%87%AA%E5%8A%A8%E8%A7%A3%E7%BB%91%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="解决GitHub的库绑定域名后更新文章自动解绑问题"><a href="#解决GitHub的库绑定域名后更新文章自动解绑问题" class="headerlink" title="解决GitHub的库绑定域名后更新文章自动解绑问题"></a>解决GitHub的库绑定域名后更新文章自动解绑问题</h2><p>在使用hexo部署博客文章时，很多人都会遇到一个问题：</p>
<p>为什么每次部署发布文章的时候，GitHub库绑定的域名就自动解绑了呢？</p>
<p>先上答案：将CNAME文件置于根目录下的source文件夹中。</p>
<p>原理：就是每次使用hexo将本地资源部署到GitHub库的时候，会自动覆盖之前的内容，我们绑定域名的时候有一个文件CNAME，也会被自动覆盖；基于此，我们在本地的目录下，找到source文件夹，在这里新建一个CNAME文件，这样，每次使用hexo部署的时候，都会将其上传到GitHub，自动覆盖之前的CNAME文件。</p>
<p>问题解决！</p>
<h2 id="什么是CNAME"><a href="#什么是CNAME" class="headerlink" title="什么是CNAME?"></a>什么是CNAME?</h2><h3 id="域名解析："><a href="#域名解析：" class="headerlink" title="域名解析："></a>域名解析：</h3><p>最初访问互联网采用的是我们耳熟能详的IP地址，后来人们发现使用IP太多，空空的数字，不好记忆；于是便出现了域名，那什么是域名呢？举个简单的例子，www.wechat.com 这就是域名；域名虽然便于我们理解和记忆，但是路由器并不认识，这个时候便有了域名解析；提到域名解析就必然会提到DNS服务器，置于DNS解析的具体过程请大家自行查找相关资料。</p>
<h3 id="A记录和CNAME记录"><a href="#A记录和CNAME记录" class="headerlink" title="A记录和CNAME记录"></a>A记录和CNAME记录</h3><p>有自己域名的小伙伴肯定知道这两个概念，他们在域名解析中扮演了十分重要的角色；</p>
<p>A记录，就是将域名解析成IP；CNAME就是将域名解析成另外的域名；</p>
<p>比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">某页域名myblog.github的IP为102.102.1.1</span><br><span class="line">你的域名myblog.com</span><br></pre></td></tr></table></figure>
<p>使用CNAME记录解析，便可以将你的域名myblog.com解析到myblog.github，然后在解析到对应的IP地址102.102.1.1</p>
<p>使用A记录解析，便可以将你的域名myblog.com解析到102.102.1.1</p>
<p>域名解析选A记录还是CNAME记录？</p>
<p>一般情况下都建议使用CNAME记录。CNAME记录可用于CDN加速，通过CDN加速别名解析网站域名，这样既可以起到加速网站的作用，又能隐藏网站的真实IP，减少被攻击的几率。</p>
<p>另外，对于搜索引擎对网站的收录，无论是A记录还是CNAME记录都是没有差别的。</p>
<p>CNAME解析的记录值：在网站管理里面，找到客户网站部署位置这里显示的CNAME解析域名即为CNAME解析的记录值。</p>
<p>A记录解析的记录值：可以ping一下客户网站部署位置的CNAME解析域名，得到的IP就是做A记录的记录值注意只有@这条记录做A记录，其他全部做CNAME记录。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>简单的说，A记录直接指向IP地址，CNAME记录指向域名。IP地址是互联网世界中唯一的，而CNAME指向的域名也要指向A记录，也就是说IP地址可以按需更换，而无需变更CNAME的记录值。</p>
<p>参考原文链接：<a href="https://blog.csdn.net/weixin_35969684/article/details/112337708">https://blog.csdn.net/weixin_35969684/article/details/112337708</a></p>
]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>软件推荐-电脑文件极速搜索</title>
    <url>/2022/04/26/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90-%E7%94%B5%E8%84%91%E6%96%87%E4%BB%B6%E6%9E%81%E9%80%9F%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Everything：最快文件搜索利器"><a href="#Everything：最快文件搜索利器" class="headerlink" title="Everything：最快文件搜索利器"></a>Everything：最快文件搜索利器</h1><p><a href="https://imgtg.com/image/xsdsY"><img src="https://i.imgtg.com/2022/04/26/xsdsY.md.png" alt="xsdsY.md.png"></a></p>
<h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p><a href="https://www.voidtools.com/">http://www.voidtools.com</a></p>
<h2 id="“Everything”-是什么？"><a href="#“Everything”-是什么？" class="headerlink" title="“Everything” 是什么？"></a>“Everything” 是什么？</h2><p>“Everything” 是 Windows 上一款搜索引擎，它能够基于文件名快速定文件和文件夹位置。</p>
<p>不像 Windows 内置搜索，”Everything” 默认显示电脑上每个文件和文件夹 (就如其名 “Everything”)。</p>
<p>您在搜索框输入的关键词将会筛选显示的文件和文件夹。</p>
<h2 id="“Everything”-索引全部文件需要多长时间？"><a href="#“Everything”-索引全部文件需要多长时间？" class="headerlink" title="“Everything” 索引全部文件需要多长时间？"></a>“Everything” 索引全部文件需要多长时间？</h2><p>“Everything” 仅索引文件和文件夹名，一般仅需几秒便可建立其数据库。</p>
<p>全新安装的 Windows 10 (大约 120,000 个文件) 仅需 1 秒即可索引完成。</p>
<p>索引 1,000,000 个文件将需要大约 1 分钟。</p>
<h2 id="“Everything”-能否搜索文件内容？"><a href="#“Everything”-能否搜索文件内容？" class="headerlink" title="“Everything” 能否搜索文件内容？"></a>“Everything” 能否搜索文件内容？</h2><p>可以，”Everything” 可以通过搜索函数 content: 来搜索文件内容。</p>
<p>文件内容未被索引时，搜索内容将会很慢。</p>
<h2 id="“Everything”-是否占用很多系统资源？"><a href="#“Everything”-是否占用很多系统资源？" class="headerlink" title="“Everything” 是否占用很多系统资源？"></a>“Everything” 是否占用很多系统资源？</h2><p>不，”Everything” 仅需要使用非常少的系统资源。</p>
<p>全新安装的 Windows 10 (大约 120,000 个文件) 仅需要大约 14 MB 的内存以及不到 9 MB 的硬盘空间。</p>
<p>1,000,000 个文件需要大约 75 MB 的内存和 45 MB 的硬盘空间。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>everything是一款非常强大的本地搜索软件，轻量但并不简单，值得下载</p>
]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>考研单词笔记2</title>
    <url>/2022/04/27/%E8%80%83%E7%A0%94%E5%8D%95%E8%AF%8D%E7%AC%94%E8%AE%B02/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="考研单词笔记2"><a href="#考研单词笔记2" class="headerlink" title="考研单词笔记2"></a>考研单词笔记2</h2><blockquote>
<p>initiate    vt，n    开始创始，新入会的人</p>
<p>principal    adj，n    主要的，校长</p>
<p>verdict n 裁决，裁定，意见，决定</p>
<p>implicit    adj 含蓄的，内含的</p>
<p>thorough adj 全面的，彻底的，仔细的</p>
<p>tragedy    n 不幸，悲剧</p>
<p>spoil    vt，vi，n    破坏溺爱；变质；赃物，战力品</p>
<p>reluctant    adj    勉强的不情愿的</p>
<p>rational    adj    合理的，理性的</p>
<p>concise    adj    简洁的，简明的</p>
<p>joint    adj    联合的，共同的</p>
<p>pursue    vt    追求，继续进行，追赶</p>
<p>trail    vt，vi，n    拖拉，跟踪；痕迹踪迹</p>
<p>indulge    vi,vt    沉迷于，满足，纵容</p>
<p>genius    n    天才人物，天赋本领</p>
<p>ingenious    adj    精巧的，巧妙地</p>
<p>forge     vt,vi,n    缔造开创；稳步前进；铁匠铺</p>
<p>harmony    n    融洽，和睦，和谐</p>
<p>simultaneous    adj    同步的，同时存在的</p>
<p>homogeneous    adj    由同种族人组成的，同类组成的</p>
<p>neighborhood    n    居住区，街坊邻居</p>
<p>staff    n，vt    全体职员；任职于</p>
<p>occasion    n    特殊场合，时机</p>
<p>recur    vi    再次发生，再次出现</p>
<p>curb    vt    控制，抑制</p>
<p>stem    n，vt,vi    植物茎秆；阻止遏制；源于</p>
<p>vulgar    adj    粗俗的，俗气的，下流的</p>
<p>deteriorate    vi    恶化，变坏，衰退</p>
<p>extinct    adj    已灭绝的，消失的</p>
<p>instinct    n    本能天性直觉</p>
<p>-</p>
<p>-</p>
<p>-</p>
<p>-</p>
<p>-</p>
<p>-</p>
<p>-</p>
<p>-</p>
<p>-</p>
<p>-</p>
</blockquote>
]]></content>
      <categories>
        <category>考研单词笔记</category>
      </categories>
      <tags>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>山东大学DSP原理与应用实验3-汇编实验</title>
    <url>/2022/04/29/%E5%B1%B1%E4%B8%9C%E5%A4%A7%E5%AD%A6DSP%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E9%AA%8C3-%E6%B1%87%E7%BC%96%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="山东大学DSP原理与应用实验3-汇编实验"><a href="#山东大学DSP原理与应用实验3-汇编实验" class="headerlink" title="山东大学DSP原理与应用实验3-汇编实验"></a>山东大学DSP原理与应用实验3-汇编实验</h1><h2 id="一、实验要求"><a href="#一、实验要求" class="headerlink" title="一、实验要求"></a>一、实验要求</h2><details class="folding-tag" cyan><summary> 点击展开 </summary>
              <div class='content'>
              <ol><li><p>利用MATLAB的滤波器设计软件，生成低通滤波器、高通滤波器，分别给出滤波器系数。</p></li><li><p>利用MATLAB产生由不同的正弦波合成的波形文件，送入CCS。</p></li><li><p>编写汇编程序，分别实现低通、高通滤波，用CCS画出波形，给出结果分析。</p></li><li><p>与实验二的耗时进行比较。</p></li></ol>
              </div>
            </details>
<h2 id="二、实验内容及步骤"><a href="#二、实验内容及步骤" class="headerlink" title="二、实验内容及步骤"></a>二、实验内容及步骤</h2><h3 id="1-利用MATLAB的滤波器设计软件，生成低通滤波器、高通滤波器，分别给出滤波器系数。"><a href="#1-利用MATLAB的滤波器设计软件，生成低通滤波器、高通滤波器，分别给出滤波器系数。" class="headerlink" title="1.利用MATLAB的滤波器设计软件，生成低通滤波器、高通滤波器，分别给出滤波器系数。"></a><strong>1.利用MATLAB的滤波器设计软件，生成低通滤波器、高通滤波器，分别给出滤波器系数。</strong></h3><details class="folding-tag" yellow><summary> 点击展开 </summary>
              <div class='content'>
              <p>基本步骤与实验二完全一致；但是便于汇编指令的使用，我对滤波器的阶数做了相应的调整，具体步骤如下：</p><p>(1)   打开Matlab软件，在命令行窗口输入filterDesigner指令，打开滤波器设计工具窗口；</p><p>(2)   设置滤波器的相关参数，这里选择FIR数字低通滤波器，相关参数如下所示：</p><p><img src="https://i.imgtg.com/2022/04/29/zB4lK.png" alt="zB4lK.png" style="zoom:50%;" /></p><p>选择海明窗，低通滤波器，10阶，截止频率为600Hz，抽样频率为4096Hz<br>(3)    在matlab源码中，选中主要部分，并去掉最后一行的分号，在控制台输出滤波器系数：</p><p><img src="https://i.imgtg.com/2022/04/29/zBRzB.png" alt="zBRzB.png" style="zoom:50%;" /></p><p>(4)    由于CCS汇编不能直接读取十进制小数，使用下面命令进行转化；h=round(b*2^15)</p><p><img src="https://i.imgtg.com/2022/04/29/zBJXg.png" alt="zBJXg.png" style="zoom:50%;" /></p><p>这是低通滤波器的滤波系数<br>(5)    选择FIR数字高通滤波器，相关参数如下所示：</p><p><img src="https://i.imgtg.com/2022/04/29/zBtJs.png" alt="zBtJs.png"></p><p>(6)    下面需要得到滤波器的系数，首先将设计好的滤波器用代码形式查看：<br>(7)    在matlab源码中，选中主要部分，并去掉最后一行的分号，在控制台输出滤波器系数：</p><p><img src="https://i.imgtg.com/2022/04/29/zBpHl.png" alt="zBpHl.png" style="zoom:50%;" /></p><p>(8)    由于CCS汇编不能直接读取十进制小数，使用下面命令进行转化；h=round(b*2^15)</p><p><img src="https://i.imgtg.com/2022/04/29/zBHTa.png" alt="zBHTa.png" style="zoom:50%;" /></p><p>(9)    这里得到滤波器的系数在CCS的汇编中将要用到</p>
              </div>
            </details>
<h2 id="2-利用MATLAB产生由不同的正弦波合成的波形文件，送入CCS。"><a href="#2-利用MATLAB产生由不同的正弦波合成的波形文件，送入CCS。" class="headerlink" title="2.利用MATLAB产生由不同的正弦波合成的波形文件，送入CCS。"></a>2.利用MATLAB产生由不同的正弦波合成的波形文件，送入CCS。</h2><details class="folding-tag" blue><summary> 点击展开 </summary>
              <div class='content'>
              <p>CCS软件可以很方便的使用C语言或者汇编语言实现DSP信号的处理操作，但是产生复杂的输入信号数据就会比较麻烦，但是MATLAB却可以很轻松简单的完成这些操作。<br>我们使用的时候需要将MATLAB生成的数据文件导入到CCS中，.dat文件是CCS能够识别的文件格式。<br>(1)    输入信号产生的MATLAB源代码：</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">f1=<span class="number">100</span>;</span><br><span class="line">f2=<span class="number">1500</span>;</span><br><span class="line">fs=<span class="number">4096</span>;</span><br><span class="line">N=<span class="number">256</span>;</span><br><span class="line">T=<span class="number">1</span>/fs;</span><br><span class="line">n=<span class="number">0</span>:N;</span><br><span class="line">y1=<span class="number">1024</span>*<span class="built_in">sin</span>(<span class="number">2</span>*<span class="built_in">pi</span>*f1*n*T);</span><br><span class="line">y2=<span class="number">1024</span>*<span class="built_in">sin</span>(<span class="number">2</span>*<span class="built_in">pi</span>*f2*n*T);</span><br><span class="line">y=y1+y2;</span><br><span class="line">xto_ccs=<span class="built_in">round</span>(y);</span><br><span class="line">fid=fopen(<span class="string">&#x27;firin.inc&#x27;</span>,<span class="string">&#x27;w&#x27;</span>);<span class="comment">%将文件头写入文件，将生成的y信号写入到文件，格式四位小数</span></span><br><span class="line">fprintf(fid,<span class="string">&#x27; .word  %d\n&#x27;</span>,xto_ccs);</span><br><span class="line">fclose(fid);</span><br></pre></td></tr></table></figure><p>(2)    MATLAB中运行结果：</p><p><img src="https://i.imgtg.com/2022/04/29/zBLZS.png" alt="zBLZS.png" style="zoom:50%;" /></p><p>这里是两组信号叠加产生的的输入信号波形，f1从100Hz-100<em>256Hz；f2从1500Hz到1500</em>256Hz。（相当于叠加了噪声信号）<br>(3)    程序运行的结果，在bin目录的DSP1目录下产生一个firin.inc的文件，如上图所示：<br>输出的时候 .word之前一定要加上空格！！<br>(4)    可以用记事本的方式打开查看数据内容，一组数，如下图：</p><p><img src="https://i.imgtg.com/2022/04/29/zBEcN.png" alt="zBEcN.png" style="zoom:50%;" /></p><p>(5)    将firin.inc文件复制到CCS工程项目的文件目录下，便于实验时调用：</p>
              </div>
            </details>
<h2 id="3-编写汇编程序，分别实现低通、高通滤波，用CCS画出波形，给出结果分析。"><a href="#3-编写汇编程序，分别实现低通、高通滤波，用CCS画出波形，给出结果分析。" class="headerlink" title="3.编写汇编程序，分别实现低通、高通滤波，用CCS画出波形，给出结果分析。"></a>3.编写汇编程序，分别实现低通、高通滤波，用CCS画出波形，给出结果分析。</h2><details class="folding-tag" orange><summary> 点击展开 </summary>
              <div class='content'>
              <p>(1)    建立新的工程：取名为volume6</p><p><img src="https://i.imgtg.com/2022/04/29/zBQMC.png" alt="zBQMC.png" style="zoom:50%;" /></p><p>(2)    新建文件</p><p>​     <a href="https://imgtg.com/image/zBS7L"><img src="https://i.imgtg.com/2022/04/29/zBS7L.png" alt="zBS7L.png" style="zoom:50%;" /></a><br>在文件中编辑实验用到的汇编代码：<br>这里给出源代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.title &quot;firtest.asm&quot;</span><br><span class="line">.mmregs</span><br><span class="line"> .global start</span><br><span class="line"> .def start</span><br><span class="line"> .def _c_int00 </span><br><span class="line">K0 .set 1 </span><br><span class="line">K .set 3259 ;输入样本数据个数</span><br><span class="line">input: .copy &quot;firin.inc&quot;</span><br><span class="line">output: .space 1024</span><br><span class="line">table .sect &quot;table&quot; ;FIR 滤波器系数</span><br><span class="line">N .set 10 ;FIR 滤波器阶数</span><br><span class="line">CN: .word  -171,-232,538,3528,7791,9878,7791,3528,538,-232,-171</span><br><span class="line">;CN: .word  -36,-384,948,181,-9116,13490,-9116,181,948,-384,-36</span><br><span class="line"></span><br><span class="line"> .data</span><br><span class="line"></span><br><span class="line"> .text</span><br><span class="line">_c_int00 b start </span><br><span class="line"> nop</span><br><span class="line"> nop</span><br><span class="line">start: RSBx FRCT ;小数乘法编程时，设置 FRCT(小数方式)位 </span><br><span class="line"> STM input,AR1 ;AR1 指向 FIR 滤波器输入数据存储空间地址</span><br><span class="line"> STM output,AR4 ;AR4 指向 FIR 滤波器输出数据存储空间地址</span><br><span class="line"> STM #K-1,BRC</span><br><span class="line"> RPTB LOOP</span><br><span class="line"> SUB A</span><br><span class="line"> MVMM AR1,AR2</span><br><span class="line"> STM CN,AR3</span><br><span class="line"> RPT #N-1</span><br><span class="line"> MAC *AR2+,*AR3+,A; 双操作数寻址,A=(AR2)*(AR3)+A;AR2 和 AR3 地址加 1</span><br><span class="line"> STH A,*AR4+ ; x地址的内容左移16位加B的高端字,结果放A</span><br><span class="line">LOOP: LD *AR1+,A </span><br><span class="line">EEND B EEND</span><br><span class="line"> .end</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(3)    保存文件，并命名firtest.asm汇编文件<br>(4)    编译，提示无错即可，如下图所示：</p><p><img src="https://i.imgtg.com/2022/04/29/zBcXX.png" alt="zBcXX.png" style="zoom:50%;" /></p><p>选择Compile Files</p><p><img src="https://i.imgtg.com/2022/04/29/zB0Li.png" alt="zB0Li.png" style="zoom:50%;" /></p><p>(5)    构建工程build<br>在Project菜单中，选择Build</p><p><img src="https://i.imgtg.com/2022/04/29/zBszt.png" alt="zBszt.png" style="zoom:50%;" /></p><p>(6)    装载out文件</p><p><img src="https://i.imgtg.com/2022/04/29/zBVPx.png" alt="zBVPx.png" style="zoom:50%;" /><img src="https://i.imgtg.com/2022/04/29/zBYlj.png" alt="zBYlj.png"></p><p><img src="https://i.imgtg.com/2022/04/29/zBYlj.png" alt="zBYlj.png"></p><p>(7)    view中观察输入输出图像，使用方式如下图所示：</p><p><img src="https://i.imgtg.com/2022/04/29/zBlTp.png" alt="zBlTp.png" style="zoom:50%;" /></p><p>(8)    分别选择时域分析，频域分析，入口地址为输入数组input，观察输出时改为输出数组output<br>    <img src="https://i.imgtg.com/2022/04/29/zB9vU.png" alt="zB9vU.png" style="zoom:50%;" /></p><p><img src="https://i.imgtg.com/2022/04/29/zBjcY.png" alt="zBjcY.png" style="zoom:50%;" /></p><p>其它选项默认即可<br>(9)    打开四个窗口观察输入输出时域和频域的波形：</p><p>(10)    点击Debug→run运行程序，</p><p><img src="https://i.imgtg.com/2022/04/29/zB8Nq.png" alt="zB8Nq.png" style="zoom:50%;" /></p><p>(11)    运行一段时候点击halt中止，则会在四个窗口中输出对应的波形，如下图所示：</p><p><img src="https://i.imgtg.com/2022/04/29/zTx9s.png" alt="zTx9s.png"></p><p>此部分为低通滤波，可以看到，输入信号的高频部分和高频噪声都被率除了，滤波效果不错，基本无失真。<br>(12)    高通滤波的步骤与上面保持一致，记得将高通滤波器的设计参数以及滤波器系数设置好；滤波器设计参数如下：<br>截止频率1200Hz，抽样频率4096Hz，海明窗10阶FIR数字滤波器<br>滤波器系数如下：</p><p><img src="https://i.imgtg.com/2022/04/29/zB6Ov.png" alt="zB6Ov.png" style="zoom:50%;" /></p><p>(13)    在汇编代码中，将滤波器系数更换为高通滤波器系数，并且编译、构建、装载、运行、分析；具体步骤与上低通滤波器完全一致，就不再罗列；<br>tips：在仿真低通滤波后进行高通滤波并不需要退出重进，只需要将装载的项目unload即可，具体步骤如下：</p><p><img src="https://s2.loli.net/2022/04/29/msJuXMKSwFndDHq.png" alt="22.png" style="zoom:50%;" /></p><p>选择需要unload的项目，或者直接all。<br>修改后的部分代码：</p><p><img src="https://i.imgtg.com/2022/04/29/zBXLc.png" alt="zBXLc.png" style="zoom:50%;" /></p><p>(14)    高通滤波汇编代码的编译结果：</p><p><img src="https://s2.loli.net/2022/04/29/VBUl6bkyxeuTwjG.png" alt="24.png" style="zoom:50%;" /></p><p>(15)    高通滤波汇编代码的构建结果：</p><p><img src="https://s2.loli.net/2022/04/29/qblWFtV7T4YvPJ1.png" alt="25.png" style="zoom:50%;" /></p><p>(16)    高通滤波结果如图所示：</p><p><img src="https://i.imgtg.com/2022/04/29/zTkRB.png" alt="zTkRB.png"></p><p>可以看到高通滤波的结果相比于低通滤波的效果要差一些，这是截止频率设定的问题， 滤波器设计的时候，截止频率给出的是1200Hz，而输入信号的设定方式为低频100-100*256Hz，连续的频率，因此出现这种情况在可控范围内即可；如果要提高滤波效果，可以在滤波器设计的时候，使用更高阶的滤波器，或者使用适合高通滤波的窗函数设计法设计滤波器。</p>
              </div>
            </details>
<h2 id="4-与实验二的耗时进行比较。"><a href="#4-与实验二的耗时进行比较。" class="headerlink" title="4.与实验二的耗时进行比较。"></a>4.与实验二的耗时进行比较。</h2><details class="folding-tag" green><summary> 点击展开 </summary>
              <div class='content'>
              <p>以高通滤波为例，进行演示；同样为进行优化和不同优化等级下的耗时比较</p><p><img src="https://s2.loli.net/2022/04/29/iWpTVJSmQuvk3YP.png" alt="27.png" style="zoom:50%;" /></p><p>在结束位置设置断点，由于这里已经运行过，因此断点设置好以后需要让仿真restart；<br>修改优化级别进行仿真的时候，每次都需要unload，然后修改，然后rebuild，在加载设置断点运行；<br>具体步骤如下：<br>在工程处右键，选择如下内容：</p><p><img src="https://s2.loli.net/2022/04/29/I149pGftwlbVyh5.png" alt="28.png" style="zoom:50%;" /></p><p>选择优化级别，如下图所示：</p><p><img src="https://s2.loli.net/2022/04/29/ZchoqRxuENPUQrM.png" alt="29.png" style="zoom:50%;" /></p><p>完成上面的步骤以后，unload项目，然后rebuild，在load，设置断点，运行；</p><p><img src="https://s2.loli.net/2022/04/29/6mGsq3vkCb5MpxU.png" alt="30.png" style="zoom:50%;" /></p><p>汇编代码的效率显而易见，汇编代码的效率几乎是最C代码高级别优化后的100倍。<br>相较于前面的c语言程序运行的时间，汇编代码运行的效率有了大幅度的优化，但是毕竟这些时间相比于编程的时间而言就微不足道了，汇编的代码虽然运行效率高，但是编写过程复杂，对我们十分不友好；相比于运行的这一点点时间，当然更倾向于简单高效的C语言编程。</p>
              </div>
            </details>]]></content>
      <categories>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>DSP原理与应用实验</tag>
      </tags>
  </entry>
  <entry>
    <title>山东大学DSP原理与应用实验2-C语言实验</title>
    <url>/2022/04/29/%E5%B1%B1%E4%B8%9C%E5%A4%A7%E5%AD%A6DSP%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E9%AA%8C2-C%E8%AF%AD%E8%A8%80%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-orange"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>look here</p></div></div>
<h1 id="一、实验要求"><a href="#一、实验要求" class="headerlink" title="一、实验要求"></a>一、实验要求</h1><details class="folding-tag" cyan><summary> 密码样式的文本：{% psw 点击展开 </summary>
              <div class='content'>
              <p> %}</p><ol><li><p>利用MATLAB的滤波器设计软件，生成低通滤波器、高通滤波器，分别给出滤波器系数。</p></li><li><p>利用MATLAB产生由不同的正弦波合成的波形文件，送入CCS。</p></li><li><p>编写C程序，分别实现低通、高通滤波，用CCS画出波形，给出结果分析。</p></li><li><p>利用编译器的op选项，对实验二的C语言程序按照级别进行优化，给出耗时的变化的分析。</p></li><li><p>应用CCS的内联函数实现低通、高通滤波，与步骤1中的耗时进行比较。</p></li></ol>
              </div>
            </details>
<h1 id="二、实验内容及步骤"><a href="#二、实验内容及步骤" class="headerlink" title="二、实验内容及步骤"></a>二、实验内容及步骤</h1><h3 id="1-利用MATLAB的滤波器设计软件，生成低通滤波器、高通滤波器，分别给出滤波器系数。"><a href="#1-利用MATLAB的滤波器设计软件，生成低通滤波器、高通滤波器，分别给出滤波器系数。" class="headerlink" title="1.利用MATLAB的滤波器设计软件，生成低通滤波器、高通滤波器，分别给出滤波器系数。"></a>1.利用MATLAB的滤波器设计软件，生成低通滤波器、高通滤波器，分别给出滤波器系数。</h3><details class="folding-tag" yellow><summary> 点击展开 </summary>
              <div class='content'>
              <p>(1)    打开Matlab软件，在命令行窗口输入filterDesigner指令，打开滤波器设计工具窗口；</p><p><img src="https://i.imgtg.com/2022/04/29/zU1m1.png" alt="zU1m1.png" style="zoom:50%;" /></p><p>(2)    设置滤波器的相关参数，这里选择FIR数字低通滤波器，采用hamming窗，10阶，截止频率为600Hz，抽样频率为4096Hz，如下所示：</p><p><img src="https://i.imgtg.com/2022/04/29/zUF4r.png" alt="zUF4r.png" style="zoom:50%;" /></p><p>(3)    选择查看滤波器代码，并在输出结果的位置去掉分号，以便在控制台打印输出内容，执行选中部分：</p><p><img src="https://i.imgtg.com/2022/04/29/zUh6M.png" alt="zUh6M.png" style="zoom:50%;" /></p><p>(4)    得到输出内容如下：</p><p><img src="https://i.imgtg.com/2022/04/29/zUzic.png" alt="zUzic.png" style="zoom:50%;" /></p><p>(5)    另外一种方式是采用C语言的头文件引进的方式，当然也是主流和老师推荐的方式，尤其对大量的数据比较友好。如果采用直接将滤波器系数放进代码的形式，将会使代码显得臃肿，下面介绍如何用matlab导出.h头文件并在CCS中的使用；<br>(6)    将生成的滤波器系数导出，生成.h文件，也就是c的头文件；</p><p><img src="https://i.imgtg.com/2022/04/29/zUnbG.png" alt="zUnbG.png" style="zoom:50%;" /></p><p>(7)    将其命名为LowPassFilter保存；</p><p><img src="https://i.imgtg.com/2022/04/29/zU7VI.png" alt="zU7VI.png" style="zoom:50%;" /></p><p>(8)    选择FIR数字高通滤波器，相关参数如下所示：</p><p><img src="https://i.imgtg.com/2022/04/29/zUeqD.png" alt="zUeqD.png" style="zoom:50%;" /></p><p>(9)    按照同样的方法保存HighPassFilter.h文件</p><p><img src="https://i.imgtg.com/2022/04/29/zUrAF.png" alt="zUrAF.png" style="zoom:50%;" /></p>
              </div>
            </details>
<h3 id="2-利用MATLAB产生由不同的正弦波合成的波形文件，送入CCS。"><a href="#2-利用MATLAB产生由不同的正弦波合成的波形文件，送入CCS。" class="headerlink" title="2.利用MATLAB产生由不同的正弦波合成的波形文件，送入CCS。"></a>2.利用MATLAB产生由不同的正弦波合成的波形文件，送入CCS。</h3><details class="folding-tag" red><summary> 点击展开 </summary>
              <div class='content'>
              <p>CCS软件可以很方便的使用C语言或者汇编语言实现DSP信号的处理操作，但是产生复杂的输入信号数据就会比较麻烦，但是MATLAB却可以很轻松简单的完成这些操作。<br>我们使用的时候需要将MATLAB生成的数据文件导入到CCS中，.dat文件是CCS能够识别的文件格式。<br>(1)    输入信号产生的MATLAB源代码：</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">f1=<span class="number">100</span>;</span><br><span class="line">f2=<span class="number">1500</span>;</span><br><span class="line">fs=<span class="number">4096</span>;</span><br><span class="line">N=<span class="number">1024</span>;</span><br><span class="line">T=<span class="number">1</span>/fs;</span><br><span class="line">n=<span class="number">0</span>:N;</span><br><span class="line">y1=<span class="number">1024</span>*<span class="built_in">sin</span>(<span class="number">2</span>*<span class="built_in">pi</span>*f1*n*T);</span><br><span class="line">y2=<span class="number">1024</span>*<span class="built_in">sin</span>(<span class="number">2</span>*<span class="built_in">pi</span>*f2*n*T);</span><br><span class="line">y=y1+y2;</span><br><span class="line">xto_ccs=<span class="built_in">round</span>(y);</span><br><span class="line">fid=fopen(<span class="string">&#x27;insignal.h&#x27;</span>,<span class="string">&#x27;w&#x27;</span>);<span class="comment">%将文件头写入文件，将生成的y信号写入到文件，格式四位小数</span></span><br><span class="line">fprintf(fid,<span class="string">&#x27; %d ,&#x27;</span>,xto_ccs);</span><br><span class="line">fclose(fid);</span><br></pre></td></tr></table></figure><p>(2)    MATLAB中运行结果：<br>这里是两组信号叠加产生的的输入信号波形<br>程序运行的结果，在bin目录的DSP1目录下产生一个insignal.h的文件，如下图所示：</p><p>打开文件，并进行简单的编辑，使得可以在CCS中直接引用；</p><p><img src="https://i.imgtg.com/2022/04/29/zUAQ6.png" alt="zUAQ6.png" style="zoom:50%;" /></p><p>下面对其进行改造，成数组格式，具体格式参照matlab生成的滤波器的.h文件；下面是部分截图：</p><p><img src="https://i.imgtg.com/2022/04/29/zUKCP.png" alt="zUKCP.png" style="zoom:50%;" /></p><p>一定要记得在数组的}后面加上分号；实际做的时候这里忘记加分号导致一直报错！！！</p>
              </div>
            </details>
<h3 id="3-编写C程序，分别实现低通、高通滤波，用CCS画出波形，给出结果分析。"><a href="#3-编写C程序，分别实现低通、高通滤波，用CCS画出波形，给出结果分析。" class="headerlink" title="3.编写C程序，分别实现低通、高通滤波，用CCS画出波形，给出结果分析。"></a>3.编写C程序，分别实现低通、高通滤波，用CCS画出波形，给出结果分析。</h3><details class="folding-tag" cyan><summary> 点击展开 </summary>
              <div class='content'>
              <p>(1)    建立新的工程文件，并将第一步生成的.h头文件添加到文件目录下：</p><p><img src="https://i.imgtg.com/2022/04/29/zUvnb.png" alt="zUvnb.png" style="zoom:50%;" /></p><p>(2)    新建工程，命名为filter，将.h头文件添加到项目工程</p><p><img src="https://i.imgtg.com/2022/04/29/zUy4l.png" alt="zUy4l.png" style="zoom:50%;" /></p><p>(3)    新建.c源文件，完成滤波实验，源代码如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;LowPassFilter.h&quot;</span></span></span><br><span class="line"><span class="comment">//#include &quot;HighPassFilter.h&quot;	//由于matlab生成的.h头文件中都是数组B</span></span><br><span class="line">								<span class="comment">//因此每次使用的时候注释掉不用的那个就可了</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;insignal.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> L 1025</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pi 3.1415926</span></span><br><span class="line"><span class="type">long</span> yn;					<span class="comment">//保存滤波后的结果，32位长整型</span></span><br><span class="line"><span class="type">long</span> input[L];			<span class="comment">//输入数组，作为视图的输入地址观察输入</span></span><br><span class="line"><span class="type">long</span> output[L];		 <span class="comment">//输出数组，作为视图的输入地址观察输出</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">	<span class="type">int</span> m,n; </span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;L;i++)</span><br><span class="line">			input[i]=xn[i];		<span class="comment">//待滤波信号，乘以1024转换为Q10格式（sin范围为-1~1，将其转换为整数格式）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;L+BL;n++)	<span class="comment">//卷积计算</span></span><br><span class="line">&#123;</span><br><span class="line">	yn=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(m=<span class="number">0</span>;(m&lt;BL)&amp;&amp;(m&lt;n);m++)</span><br><span class="line">		yn+=B[m]*input[n-m];</span><br><span class="line">	output[n]=yn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);					<span class="comment">//循环等待</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4)    保存为filter.c文件<br>(5)    编译程序，提示下面的错误：</p><p><img src="https://i.imgtg.com/2022/04/29/zUg6g.png" alt="zUg6g.png" style="zoom:50%;" /></p><p>缺少头文件tmwtypes.h，经查找，该文件在matlab的安装路径下，将其拷贝到工程目录并添加进去：（其实在matlab滤波器生成的.h头文件中就有先关的说明，只是当时没注意）<br>(6)    完整的工程项目：</p><p><img src="https://i.imgtg.com/2022/04/29/zUpkB.png" alt="zUpkB.png" style="zoom:50%;" /></p><p>(7)    再次编译，提示没有错误：</p><p><img src="https://i.imgtg.com/2022/04/29/zUPYK.png" alt="zUPYK.png" style="zoom:50%;" /></p><p>(8)    构建项目（Program→build），生成.out文件：</p><p><img src="https://i.imgtg.com/2022/04/29/zUJms.png" alt="zUJms.png" style="zoom:50%;" /></p><p>(9)    装载项目，在项目的Debug目录下找到filter.out，并进行loadprogram：</p><p><img src="https://i.imgtg.com/2022/04/29/zUt5a.png" alt="zUt5a.png" style="zoom:50%;" /></p><p>(10)    利用CCS软件自带的graph工具测试输入输出波形，并且可以对信号进行频谱分析，如下图所示：<br>时域分析：</p><p><img src="https://i.imgtg.com/2022/04/29/zU4AS.png" alt="zU4AS.png" style="zoom:50%;" /></p><p>频域分析：</p><p><img src="https://i.imgtg.com/2022/04/29/zUDSN.png" alt="zUDSN.png" style="zoom:50%;" /></p><p>将入口地址分别改为input和output将显示输入和输出的波形图。<br>其他参数默认就可以。<br>参数说明：<br>Acquisition Buffer Size：表示通过仿真器从DSP的内存中读取的数据的大小。这里我们设置成1024，也可以设置成比他更小的值，这样就只能看到信号的部分图像。<br>Dsp Data Type：数据类型设置，因为在程序中使用的是long型数据，在这里需要设置成32位整形数据。<br>Index Increment：索引增量，表示每个数据点序号的相差值，这里是逐点显示的，因此默认设置为1，如果想要每隔一个点显示一个那么就应该设置成2。<br>Q_Value：Q值，一般这不常用，默认。<br>Sampling Rate Hz：以Hz为单位的采样率，在这里我们的采样率是4096，因此设置成4096。<br>Start Address：开始地址，表示要显示的数组的首地址，现在想要看的是数组input，这里设置成input。<br>Auto Scale：自动调整显示比例使其适应整个显示窗口，默认即可。<br>Axis Display ：显示坐标轴，默认即可。<br>Data Plot Style：数据绘制类型，有Line和Bar两种，这里选择Line。<br>Display Data Size：显示数据大小，表示要将多少个点的数据进行显示，注意这个值一定要小于等于Acquisition Buffer Size，这里设置成1024。<br>Grid Style：网格类型，有 NoGrid, Minor Grid, Major Grid三种选项，默认即可。<br>Magnitude Display Scale：幅值显示类型，有Linear（线性的）Logarithmic（对数的），默认即可。<br>Time Display Unit：显示时间的单位有sample,s, ms, us几种可选，其中sample表示显示的点的序号，默认即可。<br>Use Dc Value For Graph：是否使用Dc值，一般不常用，默认即可。</p><p>频谱FFT参数说明：部分参数和时域显示时的参数相同，有部分不同如下：<br>Signal Type ：信号类型，有Real，Complex这两种，此处信号数据均为实数据，因此我们选择Real，如果数据类型是Complex，选择Complex。<br>Frequency Display Unit ：频率显示单位，有Hz,KHz,MHz三种，这里选择Hz。<br>FFT Order ：FFT的阶数，由它来决定FFT Frame Size，例如 FFT Order 设置为5 那么FFT Frame Size 就为32 = 2^5。这里我们设置成12，那么FFT Frame Size就是4096。<br>FFT Frame Size ：FFT做变换的点数，FFT Order决定，此处选择4096点FFT。<br>FFT Window Function ：FFT窗函数，选择做FFT变换时采用什么窗函数，有Rectangular（矩形窗），Bartlett，Blackman，Hamming，Hanning，选择什么窗函数根据实际的需求来决定到底采用哪一个窗函数，默认即可。<br>(11)    此时的窗体是没有波形的，这是我们点菜单栏Debug→run即可，或者F5<br>(12)    halt中止后，低通滤波效果如下图所示：</p><p><img src="https://i.imgtg.com/2022/04/29/zUHCC.png" alt="zUHCC.png" style="zoom:50%;" /></p><p>(13)    高通滤波按照相同的操作进行即可（将代码中的头文件的LowPassFilter.h注释掉，将HighPassFilter.h取消注释即可），下面是高通滤波的效果图：</p><p><img src="https://i.imgtg.com/2022/04/29/zUEnL.png" alt="zUEnL.png" style="zoom:50%;" /></p>
              </div>
            </details>
<h3 id="4-利用编译器的op选项，对实验二的C语言程序按照级别进行优化，给出耗时的变化的分析。"><a href="#4-利用编译器的op选项，对实验二的C语言程序按照级别进行优化，给出耗时的变化的分析。" class="headerlink" title="4.利用编译器的op选项，对实验二的C语言程序按照级别进行优化，给出耗时的变化的分析。"></a>4.利用编译器的op选项，对实验二的C语言程序按照级别进行优化，给出耗时的变化的分析。</h3><details class="folding-tag" orange><summary> 点击展开 </summary>
              <div class='content'>
              <p>(1)    右键.c文件，选择File Specific options：</p><p><img src="https://i.imgtg.com/2022/04/29/zUGDi.png" alt="zUGDi.png" style="zoom:50%;" /></p><p>各级优化的内容：</p><p>​    –O0<br>​    简化控制流图<br>​    分配变量到寄存器<br>​    进行循环旋转（loop rotation）<br>​    删除未使用的代码<br>​    简化表达式和语句<br>​    内联声明为inline的函数</p><p>​    –O2<br>​    执行局部复制/常量传递<br>​    删除未使用的赋值语句<br>​    删除局部共有表达式</p><p>​    –O2<br>​    进行软件流水<br>​    进行循环优化<br>​    删除全局共有子表达式<br>​    删除全局未使用的赋值语句<br>​    把循环中的对数组的引用转化为递增的指针形式<br>​    把循环展开</p><p>​    –O3<br>​    删除未使用的所有的函数<br>​    当函数的返回值没用到时，简化函数的返回形式<br>​    内联小的函数<br>​    重新对函数的声明进行排序。这样当优化调用代码时，被调用函数的属性是已知的<br>​    当所有调用都传递一个相同的参数时，把这个参数直接放到函数体中去，不在通过寄存器/存储器的方式传递这个参数。<br>​    识别文件级别变量的特征。<br>(2)    Opt level就是代买优化的等级，如下图所示，分为o0，o1，o2，o3优化级别：</p><p><img src="https://i.imgtg.com/2022/04/29/zUQ6X.png" alt="zUQ6X.png" style="zoom:50%;" /></p><p>(3)    打开耗时计数时钟，观察不同优化情况下的耗时情况（代码优化程度）：</p><p><img src="https://i.imgtg.com/2022/04/29/zWM0F.png" alt="zWM0F.png" style="zoom:50%;" /></p><p>(4)    打开view后，右下角会出现表的形状，在这里显示代码运行的时间（和振荡周期有关）</p><p><img src="https://i.imgtg.com/2022/04/29/zUIf1.png" alt="zUIf1.png" style="zoom:50%;" /></p><p>(5)    比较不同优化级别下的耗时情况：<br>选定断点，在 while(1)处，</p><p><img src="https://i.imgtg.com/2022/04/29/zUwKD.png" alt="zUwKD.png" style="zoom:50%;" /></p><p>黄色箭头表示程序已经运行到此处，这里就需要重新运行了；<br>每次运行后需restart程序才能回到开头运行，restart的位置在Debug→restart，然后双击右下角的图标，使得时间清零；然后点击Debug→run，程序运行结束后会在右下角显示一个时间，这个时间就是程序运行到断点处的时间；<br>每次修改完优化级别后，需要unload项目，重新构建（build）然后在load项目，完成上面的步骤即可得到准确的程序运行时间；<br>便于更好的观察程序运行情况，开启了代码汇编混合窗口模式。</p><p><img src="https://i.imgtg.com/2022/04/29/zWOw6.png" alt="zWOw6.png" style="zoom:50%;" /></p><p><img src="https://i.imgtg.com/2022/04/29/zUC5I.png" alt="zUC5I.png" style="zoom:50%;" /></p><p>观察不同优化级别下的程序运行时间：</p><p><img src="https://i.imgtg.com/2022/04/29/zW58l.png" alt="zW58l.png" style="zoom:50%;" /></p><p>但是这种方法获得的时间每次都有细微的差异，使用起来也是仅供参考，更高版本的CCS中提供了更为可靠和简单的观察方式，由于没有安装其他版本的CCS，这里就不在过多介绍。<br>不过从实验的结果来看，o2级别的优化效果是一个分水岭，所有我们一般采用的优化级别都是o2级别；这点仿真结果与实际应用是符合的。</p>
              </div>
            </details>
<h3 id="5-应用CCS的内联函数实现低通、高通滤波，与步骤1中的耗时进行比较。"><a href="#5-应用CCS的内联函数实现低通、高通滤波，与步骤1中的耗时进行比较。" class="headerlink" title="5.应用CCS的内联函数实现低通、高通滤波，与步骤1中的耗时进行比较。"></a>5.应用CCS的内联函数实现低通、高通滤波，与步骤1中的耗时进行比较。</h3><details class="folding-tag" blue><summary> 点击展开 </summary>
              <div class='content'>
              <p>(1)    基本的构建思路和第二部分相同<br>核心点是卷积方式的改变；<br>滤波的实质就是信号与滤波器的卷积输出，可以使用C语言完成卷积功能，当然也可以采用CCS的内联函数convol实现卷积运算。<br>(2)    c文件源代码如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">   <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line">   <span class="comment">//#include &quot;LowPassFilter.h&quot;</span></span><br><span class="line">   <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;HighPassFilter.h&quot;</span>	<span class="comment">//由于matlab生成的.h头文件中都是数组B</span></span></span><br><span class="line">   							<span class="comment">//因此每次使用的时候注释掉不用的那个就可了</span></span><br><span class="line">   <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;insignal.h&quot;</span></span></span><br><span class="line">   <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;dsplib.h&quot;</span>   <span class="comment">//内联函数的引用</span></span></span><br><span class="line">   <span class="meta">#<span class="keyword">define</span> L 1025</span></span><br><span class="line">   <span class="meta">#<span class="keyword">define</span> pi 3.1415926</span></span><br><span class="line">   <span class="meta">#<span class="keyword">define</span> hn 11</span></span><br><span class="line"></span><br><span class="line">				<span class="comment">//保存滤波后的结果，32位长整型</span></span><br><span class="line"></span><br><span class="line">	<span class="type">short</span> input[L];			<span class="comment">//输入数组，作为视图的输入地址观察输入</span></span><br><span class="line">	<span class="type">short</span> output[L];		 <span class="comment">//输出数组，作为视图的输入地址观察输出</span></span><br><span class="line">	<span class="type">short</span> h[<span class="number">11</span>];</span><br><span class="line">	<span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="comment">//	int m,n; </span></span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;L;i++)</span><br><span class="line">			input[i]=xn[i];		<span class="comment">//待滤波信号，乘以1024转换为Q10格式（sin范围为-1~1，将其转换为整数格式）</span></span><br><span class="line"> 		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;L;i++)</span><br><span class="line">			h[i]=B[i];	</span><br><span class="line"><span class="comment">/******注释这里，换成内联函数</span></span><br><span class="line"><span class="comment">		for(n=0;n&lt;L+BL;n++)	//卷积计算</span></span><br><span class="line"><span class="comment">		&#123;</span></span><br><span class="line"><span class="comment">			yn=0;</span></span><br><span class="line"><span class="comment">			for(m=0;(m&lt;BL)&amp;&amp;(m&lt;n);m++)</span></span><br><span class="line"><span class="comment">				yn+=B[m]*input[n-m];</span></span><br><span class="line"><span class="comment">			output[n]=yn;</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">**********	注释到这里*/</span></span><br><span class="line">	<span class="comment">//convol就是ccs自带的卷积函数</span></span><br><span class="line">	convol(input,h,output,L,hn);</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>);					<span class="comment">//循环等待</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)    编写成代码后运行，提示缺少头文件：</p><p><img src="https://i.imgtg.com/2022/04/29/zWo1P.png" alt="zWo1P.png" style="zoom:50%;" /></p><p>(4)    将头文件添加后依旧提示缺少头文件tms320.h</p><p><img src="https://i.imgtg.com/2022/04/29/zWqHb.png" alt="zWqHb.png" style="zoom:50%;" /></p><p>(5)    继续寻找添加：添加进去依旧报错，经资料查找，需要将下面的内容全都copy过来；</p><p><img src="https://i.imgtg.com/2022/04/29/zWTxg.png" alt="zWTxg.png" style="zoom:50%;" /></p><p>(6)    之后在项目右键，选择buildoptions，打开的窗口进行下面的操作，引入头文件目录：</p><p><img src="https://i.imgtg.com/2022/04/29/zWUJB.png" alt="zWUJB.png" style="zoom:50%;" /></p><p>(7)    低通滤波的结果：</p><p> <img src="https://i.imgtg.com/2022/04/29/zWWfs.png" alt="zWWfs.png" style="zoom:50%;" /></p><p>(8)    高通滤波的结果：</p><p><img src="https://i.imgtg.com/2022/04/29/zWkBK.png" alt="zWkBK.png" style="zoom:50%;" /></p><p>​            实验结果分析：使用CCS的内联函数程序的运行时间是要远远小于直接使用c语言书写的，这也就是算法差异带来的实际效果的差        异，这点在实验中体现的很明显。</p>
              </div>
            </details>]]></content>
      <categories>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>DSP原理与应用</tag>
      </tags>
  </entry>
</search>
